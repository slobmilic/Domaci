assertEquals(new int[]{75, 90, 38, 82, 52, 5, 95, 75, 15, 20, 0}, Nedelja.sortedZeros(new int[]{75, 0, 90, 38, 82, 52, 5, 95, 75, 15, 20}));
assertEquals(new int[]{23, 35, 13, 35, 27, 96, 93, 75, 73, 63, 33, 61, 41, 42, 32, 14, 23}, Nedelja.sortedZeros(new int[]{23, 35, 13, 35, 27, 96, 93, 75, 73, 63, 33, 61, 41, 42, 32, 14, 23}));
assertEquals(new int[]{64, 46}, Nedelja.sortedZeros(new int[]{64, 46}));
assertEquals(new int[]{39, 33, 63, 15, 71, 72, 66, 42, 31, 56, 90, 95, 35}, Nedelja.sortedZeros(new int[]{39, 33, 63, 15, 71, 72, 66, 42, 31, 56, 90, 95, 35}));
assertEquals(new int[]{80, 81, 46, 21, 2, 62, 79, 22, 74, 33}, Nedelja.sortedZeros(new int[]{80, 81, 46, 21, 2, 62, 79, 22, 74, 33}));
assertEquals(new int[]{65, 80, 6, 79, 5, 73, 61, 92, 97, 99, 38}, Nedelja.sortedZeros(new int[]{65, 80, 6, 79, 5, 73, 61, 92, 97, 99, 38}));
assertEquals(new int[]{27, 49, 79, 52, 31, 6, 57, 64, 60, 77, 1, 59}, Nedelja.sortedZeros(new int[]{27, 49, 79, 52, 31, 6, 57, 64, 60, 77, 1, 59}));
assertEquals(new int[]{13}, Nedelja.sortedZeros(new int[]{13}));
assertEquals(new int[]{25, 10, 36, 70, 58, 37, 99, 47, 85, 47, 57, 76, 85, 43, 79, 24, 22, 83, 0}, Nedelja.sortedZeros(new int[]{25, 10, 36, 70, 58, 37, 99, 47, 0, 85, 47, 57, 76, 85, 43, 79, 24, 22, 83}));
assertEquals(new int[]{62, 32, 27, 56, 46, 56, 17, 64, 92, 65, 94, 51}, Nedelja.sortedZeros(new int[]{62, 32, 27, 56, 46, 56, 17, 64, 92, 65, 94, 51}));
assertEquals(new int[]{49, 71, 79, 12, 48, 28, 13, 41, 20, 97, 46, 33, 27, 1}, Nedelja.sortedZeros(new int[]{49, 71, 79, 12, 48, 28, 13, 41, 20, 97, 46, 33, 27, 1}));
assertEquals(new int[]{26, 40, 98}, Nedelja.sortedZeros(new int[]{26, 40, 98}));
assertEquals(new int[]{32, 45, 18, 58, 91, 58, 73, 0}, Nedelja.sortedZeros(new int[]{32, 45, 18, 0, 58, 91, 58, 73}));
assertEquals(new int[]{64, 30, 5, 6, 89, 67, 54, 7, 37, 13, 30, 31, 35, 33, 1, 16, 65, 27}, Nedelja.sortedZeros(new int[]{64, 30, 5, 6, 89, 67, 54, 7, 37, 13, 30, 31, 35, 33, 1, 16, 65, 27}));
assertEquals(new int[]{42, 34, 25, 32, 64, 38, 9, 62, 1, 97, 4, 72, 98, 43}, Nedelja.sortedZeros(new int[]{42, 34, 25, 32, 64, 38, 9, 62, 1, 97, 4, 72, 98, 43}));
assertEquals(new int[]{40, 45, 23, 9, 71, 22, 85, 96, 97, 41, 14}, Nedelja.sortedZeros(new int[]{40, 45, 23, 9, 71, 22, 85, 96, 97, 41, 14}));
assertEquals(new int[]{95, 97, 63, 79}, Nedelja.sortedZeros(new int[]{95, 97, 63, 79}));
assertEquals(new int[]{82, 84, 41, 54, 54, 85, 14, 6, 94, 59}, Nedelja.sortedZeros(new int[]{82, 84, 41, 54, 54, 85, 14, 6, 94, 59}));
assertEquals(new int[]{77, 53, 23, 27, 80, 2, 66, 31, 25, 98, 40, 47, 35, 92, 85, 13, 47, 9, 36}, Nedelja.sortedZeros(new int[]{77, 53, 23, 27, 80, 2, 66, 31, 25, 98, 40, 47, 35, 92, 85, 13, 47, 9, 36}));
assertEquals(new int[]{62, 54}, Nedelja.sortedZeros(new int[]{62, 54}));
assertEquals(new int[]{32, 73, 90, 98, 72, 46, 92, 98, 38, 27, 63, 57, 27, 52, 54, 52, 94}, Nedelja.sortedZeros(new int[]{32, 73, 90, 98, 72, 46, 92, 98, 38, 27, 63, 57, 27, 52, 54, 52, 94}));
assertEquals(new int[]{47, 73, 22, 43, 88, 23, 50, 91, 1, 15, 91, 17, 54, 71, 83, 79, 66, 98, 22}, Nedelja.sortedZeros(new int[]{47, 73, 22, 43, 88, 23, 50, 91, 1, 15, 91, 17, 54, 71, 83, 79, 66, 98, 22}));
assertEquals(new int[]{38, 1, 41, 74}, Nedelja.sortedZeros(new int[]{38, 1, 41, 74}));
assertEquals(new int[]{97, 84, 69, 47, 57, 89, 36, 81, 51, 38, 99, 75, 83, 53}, Nedelja.sortedZeros(new int[]{97, 84, 69, 47, 57, 89, 36, 81, 51, 38, 99, 75, 83, 53}));
assertEquals(new int[]{29, 26, 24, 12, 83, 24, 98, 85, 26, 2, 91, 96, 27, 54}, Nedelja.sortedZeros(new int[]{29, 26, 24, 12, 83, 24, 98, 85, 26, 2, 91, 96, 27, 54}));
assertEquals(new int[]{87, 45, 95, 28, 43, 20, 51, 64, 78, 65, 43, 87, 71, 22, 52, 87, 66, 64, 0}, Nedelja.sortedZeros(new int[]{87, 45, 95, 28, 43, 20, 51, 64, 78, 65, 43, 87, 71, 22, 52, 87, 66, 64, 0}));
assertEquals(new int[]{57, 83, 64, 36, 59}, Nedelja.sortedZeros(new int[]{57, 83, 64, 36, 59}));
assertEquals(new int[]{37, 17, 3, 4, 16}, Nedelja.sortedZeros(new int[]{37, 17, 3, 4, 16}));
assertEquals(new int[]{82, 18, 22, 61, 16, 61, 71, 83, 83, 1, 45, 64, 60, 30}, Nedelja.sortedZeros(new int[]{82, 18, 22, 61, 16, 61, 71, 83, 83, 1, 45, 64, 60, 30}));
assertEquals(new int[]{79, 19, 27, 9, 17, 19}, Nedelja.sortedZeros(new int[]{79, 19, 27, 9, 17, 19}));
assertEquals(new int[]{22}, Nedelja.sortedZeros(new int[]{22}));
assertEquals(new int[]{67, 39, 81, 88, 82, 84, 10, 39, 83, 21, 12, 61, 26, 78, 20, 94}, Nedelja.sortedZeros(new int[]{67, 39, 81, 88, 82, 84, 10, 39, 83, 21, 12, 61, 26, 78, 20, 94}));
assertEquals(new int[]{26, 35, 20, 66, 65, 47, 51, 25, 56, 18, 12, 93, 54, 25, 56, 53, 30, 18, 0}, Nedelja.sortedZeros(new int[]{26, 35, 20, 66, 65, 47, 51, 25, 56, 18, 12, 0, 93, 54, 25, 56, 53, 30, 18}));
assertEquals(new int[]{98, 40, 11, 63, 37, 3, 89, 6, 91, 44, 37, 50, 0}, Nedelja.sortedZeros(new int[]{98, 40, 11, 0, 63, 37, 3, 89, 6, 91, 44, 37, 50}));
assertEquals(new int[]{50, 83, 16, 69, 78, 16, 83, 79, 83}, Nedelja.sortedZeros(new int[]{50, 83, 16, 69, 78, 16, 83, 79, 83}));
assertEquals(new int[]{1, 80, 96, 49, 32, 86}, Nedelja.sortedZeros(new int[]{1, 80, 96, 49, 32, 86}));
assertEquals(new int[]{84, 64, 37, 20, 39, 32}, Nedelja.sortedZeros(new int[]{84, 64, 37, 20, 39, 32}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{8, 29}, Nedelja.sortedZeros(new int[]{8, 29}));
assertEquals(new int[]{97, 16, 4, 81}, Nedelja.sortedZeros(new int[]{97, 16, 4, 81}));
assertEquals(new int[]{8, 78, 79, 76, 81, 54, 30, 5, 35, 42, 89, 77, 73, 70, 96, 91, 80, 25, 0}, Nedelja.sortedZeros(new int[]{8, 78, 79, 76, 81, 54, 30, 5, 0, 35, 42, 89, 77, 73, 70, 96, 91, 80, 25}));
assertEquals(new int[]{35, 13, 61}, Nedelja.sortedZeros(new int[]{35, 13, 61}));
assertEquals(new int[]{11, 38, 53, 95, 69, 23, 16, 73}, Nedelja.sortedZeros(new int[]{11, 38, 53, 95, 69, 23, 16, 73}));
assertEquals(new int[]{57, 42, 7, 12, 59, 34, 52, 90, 10, 94, 33, 22, 65, 46, 21, 48, 15, 0}, Nedelja.sortedZeros(new int[]{57, 42, 7, 12, 59, 34, 52, 90, 10, 94, 33, 22, 0, 65, 46, 21, 48, 15}));
assertEquals(new int[]{7, 41, 77, 63, 10, 99, 54, 30, 23, 51, 78, 39, 93, 10, 17, 14}, Nedelja.sortedZeros(new int[]{7, 41, 77, 63, 10, 99, 54, 30, 23, 51, 78, 39, 93, 10, 17, 14}));
assertEquals(new int[]{95, 37, 5, 60, 47, 11, 86, 1, 82, 82, 71, 65, 13, 20}, Nedelja.sortedZeros(new int[]{95, 37, 5, 60, 47, 11, 86, 1, 82, 82, 71, 65, 13, 20}));
assertEquals(new int[]{38, 73, 75, 85, 62, 22, 51, 83, 67, 8, 62, 89, 94, 87, 86, 0, 0}, Nedelja.sortedZeros(new int[]{38, 73, 75, 0, 85, 62, 22, 51, 83, 67, 8, 62, 89, 94, 87, 86, 0}));
assertEquals(new int[]{50, 93, 41, 80, 31, 45, 62, 75, 45, 0}, Nedelja.sortedZeros(new int[]{50, 93, 41, 80, 31, 45, 62, 75, 45, 0}));
assertEquals(new int[]{43, 5, 62, 88, 85, 54, 77, 99, 83, 44, 91, 45, 47, 69, 34}, Nedelja.sortedZeros(new int[]{43, 5, 62, 88, 85, 54, 77, 99, 83, 44, 91, 45, 47, 69, 34}));
assertEquals(new int[]{56, 11, 36, 8, 26, 58, 54, 59, 3, 10, 93, 10, 92, 9}, Nedelja.sortedZeros(new int[]{56, 11, 36, 8, 26, 58, 54, 59, 3, 10, 93, 10, 92, 9}));
assertEquals(new int[]{6, 15, 47, 80}, Nedelja.sortedZeros(new int[]{6, 15, 47, 80}));
assertEquals(new int[]{96, 93, 25, 0}, Nedelja.sortedZeros(new int[]{0, 96, 93, 25}));
assertEquals(new int[]{70, 23, 37, 37, 71, 2, 99, 36, 10, 14, 48, 50, 57, 22, 79, 25}, Nedelja.sortedZeros(new int[]{70, 23, 37, 37, 71, 2, 99, 36, 10, 14, 48, 50, 57, 22, 79, 25}));
assertEquals(new int[]{60, 60}, Nedelja.sortedZeros(new int[]{60, 60}));
assertEquals(new int[]{3, 28, 38, 42, 34, 97, 69, 29, 22, 20, 15, 8, 8, 32, 81, 60, 24}, Nedelja.sortedZeros(new int[]{3, 28, 38, 42, 34, 97, 69, 29, 22, 20, 15, 8, 8, 32, 81, 60, 24}));
assertEquals(new int[]{64, 4, 67, 38}, Nedelja.sortedZeros(new int[]{64, 4, 67, 38}));
assertEquals(new int[]{61, 7, 41, 83, 68, 28, 14, 12, 90, 87, 84, 89, 14, 79}, Nedelja.sortedZeros(new int[]{61, 7, 41, 83, 68, 28, 14, 12, 90, 87, 84, 89, 14, 79}));
assertEquals(new int[]{1, 53, 55, 33, 81, 55, 55, 25, 80, 46, 14, 38, 81, 16, 61, 59, 26}, Nedelja.sortedZeros(new int[]{1, 53, 55, 33, 81, 55, 55, 25, 80, 46, 14, 38, 81, 16, 61, 59, 26}));
assertEquals(new int[]{23, 1, 64, 74, 94, 81, 51, 21, 51, 21, 2, 72, 65, 24, 43, 15}, Nedelja.sortedZeros(new int[]{23, 1, 64, 74, 94, 81, 51, 21, 51, 21, 2, 72, 65, 24, 43, 15}));
assertEquals(new int[]{55, 2, 78, 40, 53}, Nedelja.sortedZeros(new int[]{55, 2, 78, 40, 53}));
assertEquals(new int[]{90, 9, 99, 4, 95, 24}, Nedelja.sortedZeros(new int[]{90, 9, 99, 4, 95, 24}));
assertEquals(new int[]{73, 31, 75, 2, 50, 50, 73, 79}, Nedelja.sortedZeros(new int[]{73, 31, 75, 2, 50, 50, 73, 79}));
assertEquals(new int[]{85, 23, 55, 77, 2, 16, 65, 6, 49, 80, 33, 68, 48, 2, 71}, Nedelja.sortedZeros(new int[]{85, 23, 55, 77, 2, 16, 65, 6, 49, 80, 33, 68, 48, 2, 71}));
assertEquals(new int[]{24, 85, 79, 67, 43, 16, 73, 35, 67, 29, 42, 54, 28, 32}, Nedelja.sortedZeros(new int[]{24, 85, 79, 67, 43, 16, 73, 35, 67, 29, 42, 54, 28, 32}));
assertEquals(new int[]{42, 50, 12, 33, 26, 52, 84, 85, 40, 22, 40, 43, 31, 31, 87, 10, 24, 31}, Nedelja.sortedZeros(new int[]{42, 50, 12, 33, 26, 52, 84, 85, 40, 22, 40, 43, 31, 31, 87, 10, 24, 31}));
assertEquals(new int[]{36, 52, 70, 37, 99, 63, 39, 2, 27, 42, 56, 53, 47, 50, 67}, Nedelja.sortedZeros(new int[]{36, 52, 70, 37, 99, 63, 39, 2, 27, 42, 56, 53, 47, 50, 67}));
assertEquals(new int[]{99, 50, 85, 70, 17, 22, 14, 67, 8, 97, 86, 75, 83, 11}, Nedelja.sortedZeros(new int[]{99, 50, 85, 70, 17, 22, 14, 67, 8, 97, 86, 75, 83, 11}));
assertEquals(new int[]{54, 97, 82, 54, 52, 85, 33, 81, 46, 12, 34, 10, 75}, Nedelja.sortedZeros(new int[]{54, 97, 82, 54, 52, 85, 33, 81, 46, 12, 34, 10, 75}));
assertEquals(new int[]{37, 13, 95, 88, 45, 41, 68, 27, 58, 13}, Nedelja.sortedZeros(new int[]{37, 13, 95, 88, 45, 41, 68, 27, 58, 13}));
assertEquals(new int[]{54, 32, 93, 27, 15, 44, 17, 31, 62, 33, 26}, Nedelja.sortedZeros(new int[]{54, 32, 93, 27, 15, 44, 17, 31, 62, 33, 26}));
assertEquals(new int[]{97, 64, 15, 60, 60, 28, 39, 50, 12, 4}, Nedelja.sortedZeros(new int[]{97, 64, 15, 60, 60, 28, 39, 50, 12, 4}));
assertEquals(new int[]{21, 47, 29, 39, 34, 11, 16, 39, 64, 79, 99}, Nedelja.sortedZeros(new int[]{21, 47, 29, 39, 34, 11, 16, 39, 64, 79, 99}));
assertEquals(new int[]{60}, Nedelja.sortedZeros(new int[]{60}));
assertEquals(new int[]{77, 84, 86, 35, 80, 71, 24, 12, 65, 95, 16, 33, 43, 21, 35, 13, 69, 51}, Nedelja.sortedZeros(new int[]{77, 84, 86, 35, 80, 71, 24, 12, 65, 95, 16, 33, 43, 21, 35, 13, 69, 51}));
assertEquals(new int[]{76, 94, 75, 12, 85, 91, 49, 61, 20, 29, 47, 43, 61, 80, 0}, Nedelja.sortedZeros(new int[]{76, 0, 94, 75, 12, 85, 91, 49, 61, 20, 29, 47, 43, 61, 80}));
assertEquals(new int[]{81, 60, 69}, Nedelja.sortedZeros(new int[]{81, 60, 69}));
assertEquals(new int[]{56, 1, 62, 28, 4, 97, 58, 1, 5, 43, 55, 57, 8, 63, 0}, Nedelja.sortedZeros(new int[]{56, 1, 62, 28, 4, 97, 58, 1, 5, 43, 55, 57, 0, 8, 63}));
assertEquals(new int[]{74, 58, 27, 47, 77, 57, 15, 41, 41, 39, 66, 23, 8}, Nedelja.sortedZeros(new int[]{74, 58, 27, 47, 77, 57, 15, 41, 41, 39, 66, 23, 8}));
assertEquals(new int[]{49, 49, 58, 91, 36, 28, 90, 1, 89, 69, 15, 28, 69}, Nedelja.sortedZeros(new int[]{49, 49, 58, 91, 36, 28, 90, 1, 89, 69, 15, 28, 69}));
assertEquals(new int[]{61, 68, 16, 10, 11, 34, 53, 64, 53, 25, 96, 24, 32, 55, 1, 95, 70}, Nedelja.sortedZeros(new int[]{61, 68, 16, 10, 11, 34, 53, 64, 53, 25, 96, 24, 32, 55, 1, 95, 70}));
assertEquals(new int[]{69, 78, 38, 26, 19, 75, 22, 84, 27, 75, 96, 45, 7}, Nedelja.sortedZeros(new int[]{69, 78, 38, 26, 19, 75, 22, 84, 27, 75, 96, 45, 7}));
assertEquals(new int[]{37, 80, 31, 75, 2, 56, 54, 99, 43, 29, 35}, Nedelja.sortedZeros(new int[]{37, 80, 31, 75, 2, 56, 54, 99, 43, 29, 35}));
assertEquals(new int[]{88, 96, 25, 58, 5, 31, 31, 78, 16, 13, 39, 95, 28, 39, 27}, Nedelja.sortedZeros(new int[]{88, 96, 25, 58, 5, 31, 31, 78, 16, 13, 39, 95, 28, 39, 27}));
assertEquals(new int[]{85, 85, 85, 58, 84, 90, 13, 14, 15, 66}, Nedelja.sortedZeros(new int[]{85, 85, 85, 58, 84, 90, 13, 14, 15, 66}));
assertEquals(new int[]{90, 27, 19, 98, 97, 87, 51}, Nedelja.sortedZeros(new int[]{90, 27, 19, 98, 97, 87, 51}));
assertEquals(new int[]{12, 83, 24, 8, 42, 46, 48, 5, 31, 44, 98, 70}, Nedelja.sortedZeros(new int[]{12, 83, 24, 8, 42, 46, 48, 5, 31, 44, 98, 70}));
assertEquals(new int[]{98, 85, 44, 50, 10, 66, 43, 73, 54, 84}, Nedelja.sortedZeros(new int[]{98, 85, 44, 50, 10, 66, 43, 73, 54, 84}));
assertEquals(new int[]{85, 36, 82}, Nedelja.sortedZeros(new int[]{85, 36, 82}));
assertEquals(new int[]{90, 12, 2, 52, 17, 94, 71, 5, 78, 76, 6, 99}, Nedelja.sortedZeros(new int[]{90, 12, 2, 52, 17, 94, 71, 5, 78, 76, 6, 99}));
assertEquals(new int[]{58, 26, 82, 62, 46, 26, 85}, Nedelja.sortedZeros(new int[]{58, 26, 82, 62, 46, 26, 85}));
assertEquals(new int[]{64, 44, 34, 32, 20, 90, 39, 0}, Nedelja.sortedZeros(new int[]{64, 0, 44, 34, 32, 20, 90, 39}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{38, 52, 84, 39, 3, 91, 51, 88, 39}, Nedelja.sortedZeros(new int[]{38, 52, 84, 39, 3, 91, 51, 88, 39}));
assertEquals(new int[]{31, 63, 79, 72, 67, 48, 72, 94, 71, 63, 42}, Nedelja.sortedZeros(new int[]{31, 63, 79, 72, 67, 48, 72, 94, 71, 63, 42}));
assertEquals(new int[]{56, 42, 82, 83}, Nedelja.sortedZeros(new int[]{56, 42, 82, 83}));
assertEquals(new int[]{4, 86, 34, 32, 17, 21, 23, 12, 94, 72, 37, 24, 20}, Nedelja.sortedZeros(new int[]{4, 86, 34, 32, 17, 21, 23, 12, 94, 72, 37, 24, 20}));
assertEquals(new int[]{7, 24, 42, 24, 51, 64, 96, 92, 50, 19}, Nedelja.sortedZeros(new int[]{7, 24, 42, 24, 51, 64, 96, 92, 50, 19}));
assertEquals(new int[]{73, 68, 2, 49, 80, 4, 96, 43, 99, 26, 13, 43, 71, 96}, Nedelja.sortedZeros(new int[]{73, 68, 2, 49, 80, 4, 96, 43, 99, 26, 13, 43, 71, 96}));
assertEquals(new int[]{9, 70, 1, 93, 9, 33, 90, 78, 89, 92, 56, 78, 34, 0}, Nedelja.sortedZeros(new int[]{9, 70, 1, 93, 9, 33, 0, 90, 78, 89, 92, 56, 78, 34}));
assertEquals(new int[]{23, 34, 76, 57, 92, 68, 68, 99}, Nedelja.sortedZeros(new int[]{23, 34, 76, 57, 92, 68, 68, 99}));
assertEquals(new int[]{1, 65, 15, 30, 96, 11, 36, 11}, Nedelja.sortedZeros(new int[]{1, 65, 15, 30, 96, 11, 36, 11}));
assertEquals(new int[]{93, 41, 30, 82}, Nedelja.sortedZeros(new int[]{93, 41, 30, 82}));
assertEquals(new int[]{96, 45, 20, 92, 1, 98, 80, 36, 26, 26, 21, 30, 14, 84, 38, 51, 26, 65, 13}, Nedelja.sortedZeros(new int[]{96, 45, 20, 92, 1, 98, 80, 36, 26, 26, 21, 30, 14, 84, 38, 51, 26, 65, 13}));
assertEquals(new int[]{44, 21, 80, 56, 35, 76, 75, 73, 38, 9, 71, 39}, Nedelja.sortedZeros(new int[]{44, 21, 80, 56, 35, 76, 75, 73, 38, 9, 71, 39}));
assertEquals(new int[]{73, 42, 26, 85, 55, 87, 27, 70, 15, 36, 68, 52, 24, 19, 5, 71, 70, 7, 35}, Nedelja.sortedZeros(new int[]{73, 42, 26, 85, 55, 87, 27, 70, 15, 36, 68, 52, 24, 19, 5, 71, 70, 7, 35}));
assertEquals(new int[]{52, 73, 64}, Nedelja.sortedZeros(new int[]{52, 73, 64}));
assertEquals(new int[]{64, 67, 62, 18, 32, 52, 71, 23, 30, 95, 96, 83, 91, 31, 88, 33}, Nedelja.sortedZeros(new int[]{64, 67, 62, 18, 32, 52, 71, 23, 30, 95, 96, 83, 91, 31, 88, 33}));
assertEquals(new int[]{57, 61, 99, 87, 45, 42, 27, 72, 38, 45, 13, 79, 13, 55, 2, 3, 35, 0}, Nedelja.sortedZeros(new int[]{57, 61, 99, 87, 45, 0, 42, 27, 72, 38, 45, 13, 79, 13, 55, 2, 3, 35}));
assertEquals(new int[]{91}, Nedelja.sortedZeros(new int[]{91}));
assertEquals(new int[]{32, 21}, Nedelja.sortedZeros(new int[]{32, 21}));
assertEquals(new int[]{73, 78, 25, 81, 62, 42, 81, 62, 16, 44, 71, 48, 6, 40, 83, 16, 31}, Nedelja.sortedZeros(new int[]{73, 78, 25, 81, 62, 42, 81, 62, 16, 44, 71, 48, 6, 40, 83, 16, 31}));
assertEquals(new int[]{22, 48}, Nedelja.sortedZeros(new int[]{22, 48}));
assertEquals(new int[]{69, 52, 89, 0}, Nedelja.sortedZeros(new int[]{0, 69, 52, 89}));
assertEquals(new int[]{2, 43, 49}, Nedelja.sortedZeros(new int[]{2, 43, 49}));
assertEquals(new int[]{94, 75, 6, 6, 14, 50, 51, 69, 25, 50, 95, 52}, Nedelja.sortedZeros(new int[]{94, 75, 6, 6, 14, 50, 51, 69, 25, 50, 95, 52}));
assertEquals(new int[]{76, 50, 39, 19, 2, 53, 92, 16, 4, 43, 71}, Nedelja.sortedZeros(new int[]{76, 50, 39, 19, 2, 53, 92, 16, 4, 43, 71}));
assertEquals(new int[]{37, 44, 49, 87, 23, 66, 67, 58, 91, 86, 84, 38, 34, 5, 45, 78, 41, 60, 89}, Nedelja.sortedZeros(new int[]{37, 44, 49, 87, 23, 66, 67, 58, 91, 86, 84, 38, 34, 5, 45, 78, 41, 60, 89}));
assertEquals(new int[]{53, 11, 14, 26, 31, 85}, Nedelja.sortedZeros(new int[]{53, 11, 14, 26, 31, 85}));
assertEquals(new int[]{92}, Nedelja.sortedZeros(new int[]{92}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{73, 65, 94, 37, 47, 48, 69, 39, 53, 20, 86}, Nedelja.sortedZeros(new int[]{73, 65, 94, 37, 47, 48, 69, 39, 53, 20, 86}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{1, 66, 23}, Nedelja.sortedZeros(new int[]{1, 66, 23}));
assertEquals(new int[]{47}, Nedelja.sortedZeros(new int[]{47}));
assertEquals(new int[]{2, 21, 5, 14, 66, 2, 21, 48}, Nedelja.sortedZeros(new int[]{2, 21, 5, 14, 66, 2, 21, 48}));
assertEquals(new int[]{55}, Nedelja.sortedZeros(new int[]{55}));
assertEquals(new int[]{42, 90, 27, 39, 55, 54, 27, 29, 84, 68, 34}, Nedelja.sortedZeros(new int[]{42, 90, 27, 39, 55, 54, 27, 29, 84, 68, 34}));
assertEquals(new int[]{13, 22, 83, 84, 94, 61, 31, 41, 86, 21, 94, 81, 22, 12, 13, 82, 50}, Nedelja.sortedZeros(new int[]{13, 22, 83, 84, 94, 61, 31, 41, 86, 21, 94, 81, 22, 12, 13, 82, 50}));
assertEquals(new int[]{61, 38, 27}, Nedelja.sortedZeros(new int[]{61, 38, 27}));
assertEquals(new int[]{32, 54, 47, 84, 26, 12, 14, 72, 3, 95, 82, 75, 5, 27, 13}, Nedelja.sortedZeros(new int[]{32, 54, 47, 84, 26, 12, 14, 72, 3, 95, 82, 75, 5, 27, 13}));
assertEquals(new int[]{72, 11, 27, 23, 73, 43, 58}, Nedelja.sortedZeros(new int[]{72, 11, 27, 23, 73, 43, 58}));
assertEquals(new int[]{94, 91, 57, 32, 78, 65, 12, 73, 92, 67, 20, 31, 57}, Nedelja.sortedZeros(new int[]{94, 91, 57, 32, 78, 65, 12, 73, 92, 67, 20, 31, 57}));
assertEquals(new int[]{53, 5, 10}, Nedelja.sortedZeros(new int[]{53, 5, 10}));
assertEquals(new int[]{43, 78, 72, 37, 31, 45, 76, 9, 99, 46, 13, 78}, Nedelja.sortedZeros(new int[]{43, 78, 72, 37, 31, 45, 76, 9, 99, 46, 13, 78}));
assertEquals(new int[]{12, 27, 1, 3, 30, 15, 5, 79}, Nedelja.sortedZeros(new int[]{12, 27, 1, 3, 30, 15, 5, 79}));
assertEquals(new int[]{67, 23, 4, 55, 89, 29, 80, 99, 73, 75, 98, 80, 74, 24, 55}, Nedelja.sortedZeros(new int[]{67, 23, 4, 55, 89, 29, 80, 99, 73, 75, 98, 80, 74, 24, 55}));
assertEquals(new int[]{58, 76, 73}, Nedelja.sortedZeros(new int[]{58, 76, 73}));
assertEquals(new int[]{51, 9}, Nedelja.sortedZeros(new int[]{51, 9}));
assertEquals(new int[]{21, 48, 29, 66, 99, 81, 1, 37, 14, 50, 61, 85, 35, 53}, Nedelja.sortedZeros(new int[]{21, 48, 29, 66, 99, 81, 1, 37, 14, 50, 61, 85, 35, 53}));
assertEquals(new int[]{8, 31, 11, 87, 35, 29, 57, 58, 3, 73}, Nedelja.sortedZeros(new int[]{8, 31, 11, 87, 35, 29, 57, 58, 3, 73}));
assertEquals(new int[]{55, 50, 6, 18, 67, 96, 65, 95, 76, 9, 22, 59, 45, 49, 91, 68, 37}, Nedelja.sortedZeros(new int[]{55, 50, 6, 18, 67, 96, 65, 95, 76, 9, 22, 59, 45, 49, 91, 68, 37}));
assertEquals(new int[]{56}, Nedelja.sortedZeros(new int[]{56}));
assertEquals(new int[]{89, 74, 10, 97, 55, 87, 70, 17, 53, 45, 47, 9, 25, 74}, Nedelja.sortedZeros(new int[]{89, 74, 10, 97, 55, 87, 70, 17, 53, 45, 47, 9, 25, 74}));
assertEquals(new int[]{90, 72, 14, 2, 77, 67, 56, 84, 7, 76, 81, 32, 9}, Nedelja.sortedZeros(new int[]{90, 72, 14, 2, 77, 67, 56, 84, 7, 76, 81, 32, 9}));
assertEquals(new int[]{2, 24, 12, 36, 35, 1, 46, 92, 17, 62, 6, 77, 61, 87}, Nedelja.sortedZeros(new int[]{2, 24, 12, 36, 35, 1, 46, 92, 17, 62, 6, 77, 61, 87}));
assertEquals(new int[]{66, 78, 21, 48, 56, 80, 8, 67, 23, 86, 5, 80, 99}, Nedelja.sortedZeros(new int[]{66, 78, 21, 48, 56, 80, 8, 67, 23, 86, 5, 80, 99}));
assertEquals(new int[]{1, 74, 21, 42, 1, 67, 18, 9, 57, 24, 48, 27, 24, 67, 83}, Nedelja.sortedZeros(new int[]{1, 74, 21, 42, 1, 67, 18, 9, 57, 24, 48, 27, 24, 67, 83}));
assertEquals(new int[]{12, 86, 44, 44, 37, 73}, Nedelja.sortedZeros(new int[]{12, 86, 44, 44, 37, 73}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{35, 26, 51, 57, 95, 78, 30, 55, 66, 55, 89, 18}, Nedelja.sortedZeros(new int[]{35, 26, 51, 57, 95, 78, 30, 55, 66, 55, 89, 18}));
assertEquals(new int[]{61, 38, 25, 95, 74, 16, 91, 3, 70, 51, 85, 49, 21, 0}, Nedelja.sortedZeros(new int[]{61, 38, 25, 95, 74, 16, 91, 3, 0, 70, 51, 85, 49, 21}));
assertEquals(new int[]{92, 64, 93, 86, 49, 61, 51, 37, 21, 72, 43, 84, 30, 36, 45, 39, 77, 55, 0}, Nedelja.sortedZeros(new int[]{92, 64, 0, 93, 86, 49, 61, 51, 37, 21, 72, 43, 84, 30, 36, 45, 39, 77, 55}));
assertEquals(new int[]{80}, Nedelja.sortedZeros(new int[]{80}));
assertEquals(new int[]{62, 18, 70, 45, 67, 61, 8, 17, 98, 23, 79, 79, 52, 90, 20, 29}, Nedelja.sortedZeros(new int[]{62, 18, 70, 45, 67, 61, 8, 17, 98, 23, 79, 79, 52, 90, 20, 29}));
assertEquals(new int[]{49, 95, 45}, Nedelja.sortedZeros(new int[]{49, 95, 45}));
assertEquals(new int[]{17}, Nedelja.sortedZeros(new int[]{17}));
assertEquals(new int[]{2, 38}, Nedelja.sortedZeros(new int[]{2, 38}));
assertEquals(new int[]{15, 16, 84, 82, 49, 48, 83, 33, 41, 93, 38, 19, 48, 65, 68, 1, 27}, Nedelja.sortedZeros(new int[]{15, 16, 84, 82, 49, 48, 83, 33, 41, 93, 38, 19, 48, 65, 68, 1, 27}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{49, 81, 61, 88, 23, 47, 30, 15, 83, 32, 36, 56, 5, 83}, Nedelja.sortedZeros(new int[]{49, 81, 61, 88, 23, 47, 30, 15, 83, 32, 36, 56, 5, 83}));
assertEquals(new int[]{28, 6, 43, 15, 82, 91, 19, 21, 20, 80, 81, 49, 12, 80}, Nedelja.sortedZeros(new int[]{28, 6, 43, 15, 82, 91, 19, 21, 20, 80, 81, 49, 12, 80}));
assertEquals(new int[]{39, 38, 1, 54, 56, 64, 65, 39, 42, 30, 76, 34}, Nedelja.sortedZeros(new int[]{39, 38, 1, 54, 56, 64, 65, 39, 42, 30, 76, 34}));
assertEquals(new int[]{40, 56, 51, 34, 27, 24, 82, 78, 79}, Nedelja.sortedZeros(new int[]{40, 56, 51, 34, 27, 24, 82, 78, 79}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{56, 82, 13, 69, 93, 3, 60, 69, 28, 47, 76, 40}, Nedelja.sortedZeros(new int[]{56, 82, 13, 69, 93, 3, 60, 69, 28, 47, 76, 40}));
assertEquals(new int[]{57, 28, 69, 15, 99, 83, 79, 2, 49, 70, 40, 29, 36, 53, 53, 58, 40}, Nedelja.sortedZeros(new int[]{57, 28, 69, 15, 99, 83, 79, 2, 49, 70, 40, 29, 36, 53, 53, 58, 40}));
assertEquals(new int[]{88}, Nedelja.sortedZeros(new int[]{88}));
assertEquals(new int[]{2, 38, 54, 4, 49, 16, 6, 88, 12, 2, 65}, Nedelja.sortedZeros(new int[]{2, 38, 54, 4, 49, 16, 6, 88, 12, 2, 65}));
assertEquals(new int[]{49, 99, 94, 41, 87, 96, 19, 32, 1, 94, 97, 62, 29, 86}, Nedelja.sortedZeros(new int[]{49, 99, 94, 41, 87, 96, 19, 32, 1, 94, 97, 62, 29, 86}));
assertEquals(new int[]{77, 32, 41, 77, 37}, Nedelja.sortedZeros(new int[]{77, 32, 41, 77, 37}));
assertEquals(new int[]{86, 82, 11, 48, 31, 23, 85, 74, 19, 5, 40, 61, 99, 63, 98, 94, 85}, Nedelja.sortedZeros(new int[]{86, 82, 11, 48, 31, 23, 85, 74, 19, 5, 40, 61, 99, 63, 98, 94, 85}));
assertEquals(new int[]{2, 51, 43, 36, 5, 25}, Nedelja.sortedZeros(new int[]{2, 51, 43, 36, 5, 25}));
assertEquals(new int[]{95, 71, 3, 62}, Nedelja.sortedZeros(new int[]{95, 71, 3, 62}));
assertEquals(new int[]{78, 90, 91, 52, 30, 83}, Nedelja.sortedZeros(new int[]{78, 90, 91, 52, 30, 83}));
assertEquals(new int[]{13, 22, 44, 26, 40, 84, 45, 3, 73, 3, 98, 81, 0}, Nedelja.sortedZeros(new int[]{13, 22, 44, 26, 40, 84, 45, 3, 73, 0, 3, 98, 81}));
assertEquals(new int[]{85, 74, 96, 40, 23, 49, 18, 89, 74, 40, 12, 90, 99, 88, 0}, Nedelja.sortedZeros(new int[]{85, 74, 0, 96, 40, 23, 49, 18, 89, 74, 40, 12, 90, 99, 88}));
assertEquals(new int[]{28, 54, 88, 56, 63, 47, 37, 88, 3, 84}, Nedelja.sortedZeros(new int[]{28, 54, 88, 56, 63, 47, 37, 88, 3, 84}));
assertEquals(new int[]{67, 51, 90, 99, 25, 48, 93, 48, 74, 65}, Nedelja.sortedZeros(new int[]{67, 51, 90, 99, 25, 48, 93, 48, 74, 65}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{1, 44, 91, 70, 99, 57, 8, 34, 54, 86, 7}, Nedelja.sortedZeros(new int[]{1, 44, 91, 70, 99, 57, 8, 34, 54, 86, 7}));
assertEquals(new int[]{44, 97, 27, 49, 2, 29, 91, 59, 25, 22, 66, 49, 93, 82, 70, 29, 0}, Nedelja.sortedZeros(new int[]{44, 97, 27, 49, 2, 29, 91, 59, 25, 22, 66, 0, 49, 93, 82, 70, 29}));
assertEquals(new int[]{14, 89, 87, 94, 20, 91, 37, 72, 26, 83, 48, 52, 63, 82}, Nedelja.sortedZeros(new int[]{14, 89, 87, 94, 20, 91, 37, 72, 26, 83, 48, 52, 63, 82}));
assertEquals(new int[]{52}, Nedelja.sortedZeros(new int[]{52}));
assertEquals(new int[]{49, 38, 80, 43, 34, 28, 74, 62, 13, 31}, Nedelja.sortedZeros(new int[]{49, 38, 80, 43, 34, 28, 74, 62, 13, 31}));
assertEquals(new int[]{52, 26, 87, 31, 8, 57, 35, 21, 70, 15}, Nedelja.sortedZeros(new int[]{52, 26, 87, 31, 8, 57, 35, 21, 70, 15}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{66, 18, 35, 98, 52, 60, 25, 10, 84, 77, 86}, Nedelja.sortedZeros(new int[]{66, 18, 35, 98, 52, 60, 25, 10, 84, 77, 86}));
assertEquals(new int[]{48, 35, 12, 80, 44, 47, 14, 44, 22, 7, 9, 78}, Nedelja.sortedZeros(new int[]{48, 35, 12, 80, 44, 47, 14, 44, 22, 7, 9, 78}));
assertEquals(new int[]{79, 32, 66, 87, 72, 2, 26, 53, 90, 99, 87, 83, 71}, Nedelja.sortedZeros(new int[]{79, 32, 66, 87, 72, 2, 26, 53, 90, 99, 87, 83, 71}));
assertEquals(new int[]{97, 49, 29, 69, 58, 56, 33, 60, 4}, Nedelja.sortedZeros(new int[]{97, 49, 29, 69, 58, 56, 33, 60, 4}));
assertEquals(new int[]{67, 2, 85, 23, 27, 24}, Nedelja.sortedZeros(new int[]{67, 2, 85, 23, 27, 24}));
assertEquals(new int[]{90, 75, 49, 59, 16, 74, 88, 64, 11, 20, 8, 62, 40, 49, 0}, Nedelja.sortedZeros(new int[]{90, 75, 49, 59, 16, 0, 74, 88, 64, 11, 20, 8, 62, 40, 49}));
assertEquals(new int[]{8, 51, 1, 61, 26, 14, 10, 90, 47, 14, 85, 49, 21, 33}, Nedelja.sortedZeros(new int[]{8, 51, 1, 61, 26, 14, 10, 90, 47, 14, 85, 49, 21, 33}));
assertEquals(new int[]{36, 12, 77, 22, 79, 81, 64, 84, 36, 87, 81, 13, 40, 34, 95, 81, 39}, Nedelja.sortedZeros(new int[]{36, 12, 77, 22, 79, 81, 64, 84, 36, 87, 81, 13, 40, 34, 95, 81, 39}));
assertEquals(new int[]{74, 94, 51, 25, 10, 68, 92, 94, 35, 95, 41, 78, 43, 48, 22, 22, 77, 65}, Nedelja.sortedZeros(new int[]{74, 94, 51, 25, 10, 68, 92, 94, 35, 95, 41, 78, 43, 48, 22, 22, 77, 65}));
assertEquals(new int[]{97, 5, 71, 92, 14}, Nedelja.sortedZeros(new int[]{97, 5, 71, 92, 14}));
assertEquals(new int[]{93, 36, 46, 13, 74, 97, 38}, Nedelja.sortedZeros(new int[]{93, 36, 46, 13, 74, 97, 38}));
assertEquals(new int[]{69, 82, 51, 61, 68, 14, 56, 44, 77, 92, 26, 13, 72}, Nedelja.sortedZeros(new int[]{69, 82, 51, 61, 68, 14, 56, 44, 77, 92, 26, 13, 72}));
assertEquals(new int[]{24, 91, 98, 37}, Nedelja.sortedZeros(new int[]{24, 91, 98, 37}));
assertEquals(new int[]{7}, Nedelja.sortedZeros(new int[]{7}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{52, 12, 63, 35, 37, 53, 91, 63, 14, 9, 0}, Nedelja.sortedZeros(new int[]{52, 12, 63, 35, 37, 0, 53, 91, 63, 14, 9}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{94, 35, 82, 20, 7, 96, 85, 68, 24, 56, 16, 17, 48, 5, 9}, Nedelja.sortedZeros(new int[]{94, 35, 82, 20, 7, 96, 85, 68, 24, 56, 16, 17, 48, 5, 9}));
assertEquals(new int[]{92, 64, 13, 57, 57, 31}, Nedelja.sortedZeros(new int[]{92, 64, 13, 57, 57, 31}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{89, 80, 13, 53, 20, 25, 95, 24, 30, 91, 43, 28}, Nedelja.sortedZeros(new int[]{89, 80, 13, 53, 20, 25, 95, 24, 30, 91, 43, 28}));
assertEquals(new int[]{60, 5, 11, 91, 89, 84, 4, 11, 21, 57}, Nedelja.sortedZeros(new int[]{60, 5, 11, 91, 89, 84, 4, 11, 21, 57}));
assertEquals(new int[]{37, 67, 1, 99, 44, 43, 89, 15, 65, 16, 10, 84, 39}, Nedelja.sortedZeros(new int[]{37, 67, 1, 99, 44, 43, 89, 15, 65, 16, 10, 84, 39}));
assertEquals(new int[]{53, 62, 16, 75, 84, 53, 9, 74, 15, 18}, Nedelja.sortedZeros(new int[]{53, 62, 16, 75, 84, 53, 9, 74, 15, 18}));
assertEquals(new int[]{33}, Nedelja.sortedZeros(new int[]{33}));
assertEquals(new int[]{22, 14, 38, 94, 85}, Nedelja.sortedZeros(new int[]{22, 14, 38, 94, 85}));
assertEquals(new int[]{91, 86, 53, 19}, Nedelja.sortedZeros(new int[]{91, 86, 53, 19}));
assertEquals(new int[]{16, 19, 21, 23, 30, 66, 30, 66, 65, 26, 84}, Nedelja.sortedZeros(new int[]{16, 19, 21, 23, 30, 66, 30, 66, 65, 26, 84}));
assertEquals(new int[]{79, 97, 62, 14, 52, 82, 11, 24, 31, 98, 33, 35, 40, 73, 4, 37, 95, 6}, Nedelja.sortedZeros(new int[]{79, 97, 62, 14, 52, 82, 11, 24, 31, 98, 33, 35, 40, 73, 4, 37, 95, 6}));
assertEquals(new int[]{16, 92, 95, 28, 71, 79, 14, 32, 42, 35, 67, 30, 88, 57, 16}, Nedelja.sortedZeros(new int[]{16, 92, 95, 28, 71, 79, 14, 32, 42, 35, 67, 30, 88, 57, 16}));
assertEquals(new int[]{31, 51, 36, 58, 6, 25, 28, 75}, Nedelja.sortedZeros(new int[]{31, 51, 36, 58, 6, 25, 28, 75}));
assertEquals(new int[]{46, 88, 98, 17, 11, 97, 60, 86}, Nedelja.sortedZeros(new int[]{46, 88, 98, 17, 11, 97, 60, 86}));
assertEquals(new int[]{91, 40, 90, 21, 36, 72, 10, 27, 21}, Nedelja.sortedZeros(new int[]{91, 40, 90, 21, 36, 72, 10, 27, 21}));
assertEquals(new int[]{45, 6, 73, 28, 78}, Nedelja.sortedZeros(new int[]{45, 6, 73, 28, 78}));
assertEquals(new int[]{76, 51, 83, 2, 90, 92, 11, 55, 46, 9, 68, 78, 79, 77, 72, 86, 14, 16, 28}, Nedelja.sortedZeros(new int[]{76, 51, 83, 2, 90, 92, 11, 55, 46, 9, 68, 78, 79, 77, 72, 86, 14, 16, 28}));
assertEquals(new int[]{57, 92, 55, 34, 10, 47, 11, 84, 11, 96, 59, 6, 15, 73, 98, 38}, Nedelja.sortedZeros(new int[]{57, 92, 55, 34, 10, 47, 11, 84, 11, 96, 59, 6, 15, 73, 98, 38}));
assertEquals(new int[]{29, 44, 82, 27, 74, 81, 35, 10, 52, 95, 97, 5, 75}, Nedelja.sortedZeros(new int[]{29, 44, 82, 27, 74, 81, 35, 10, 52, 95, 97, 5, 75}));
assertEquals(new int[]{2, 61, 4, 41, 67, 58, 31, 40, 75, 52}, Nedelja.sortedZeros(new int[]{2, 61, 4, 41, 67, 58, 31, 40, 75, 52}));
assertEquals(new int[]{8, 1, 65, 48, 41, 47, 14, 85, 6, 17, 15, 29, 70}, Nedelja.sortedZeros(new int[]{8, 1, 65, 48, 41, 47, 14, 85, 6, 17, 15, 29, 70}));
assertEquals(new int[]{60, 99, 78, 41, 21, 71, 53, 87, 62, 67, 54, 78, 46, 60}, Nedelja.sortedZeros(new int[]{60, 99, 78, 41, 21, 71, 53, 87, 62, 67, 54, 78, 46, 60}));
assertEquals(new int[]{52, 24, 93, 90, 65, 35, 31, 78, 56, 24, 7, 92, 56, 51}, Nedelja.sortedZeros(new int[]{52, 24, 93, 90, 65, 35, 31, 78, 56, 24, 7, 92, 56, 51}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{24, 52, 19, 59, 55, 91, 9, 9, 93, 0}, Nedelja.sortedZeros(new int[]{24, 52, 19, 59, 0, 55, 91, 9, 9, 93}));
assertEquals(new int[]{71, 99, 75, 68, 33, 77, 13, 80, 27, 72, 62, 25, 1, 7, 49, 4, 12, 60}, Nedelja.sortedZeros(new int[]{71, 99, 75, 68, 33, 77, 13, 80, 27, 72, 62, 25, 1, 7, 49, 4, 12, 60}));
assertEquals(new int[]{41, 62, 63, 25}, Nedelja.sortedZeros(new int[]{41, 62, 63, 25}));
assertEquals(new int[]{33, 35, 77, 82}, Nedelja.sortedZeros(new int[]{33, 35, 77, 82}));
assertEquals(new int[]{17, 30, 78, 57, 11}, Nedelja.sortedZeros(new int[]{17, 30, 78, 57, 11}));
assertEquals(new int[]{72, 47, 26, 32, 6, 51, 68, 65, 12, 15, 90, 25, 92, 92}, Nedelja.sortedZeros(new int[]{72, 47, 26, 32, 6, 51, 68, 65, 12, 15, 90, 25, 92, 92}));
assertEquals(new int[]{76, 49, 83, 47, 20, 76}, Nedelja.sortedZeros(new int[]{76, 49, 83, 47, 20, 76}));
assertEquals(new int[]{76, 99}, Nedelja.sortedZeros(new int[]{76, 99}));
assertEquals(new int[]{61}, Nedelja.sortedZeros(new int[]{61}));
assertEquals(new int[]{31, 48, 86, 41, 30, 26, 26, 93, 79, 68, 21, 22, 39, 0, 0}, Nedelja.sortedZeros(new int[]{31, 48, 86, 41, 0, 30, 0, 26, 26, 93, 79, 68, 21, 22, 39}));
assertEquals(new int[]{27, 58, 13, 21, 36, 58, 16, 71, 92, 75, 18, 31, 65, 11, 1, 33, 11, 49}, Nedelja.sortedZeros(new int[]{27, 58, 13, 21, 36, 58, 16, 71, 92, 75, 18, 31, 65, 11, 1, 33, 11, 49}));
assertEquals(new int[]{72, 22, 25, 3, 34, 98, 88, 16, 82, 70, 22, 35, 64, 55, 54, 66, 60}, Nedelja.sortedZeros(new int[]{72, 22, 25, 3, 34, 98, 88, 16, 82, 70, 22, 35, 64, 55, 54, 66, 60}));
assertEquals(new int[]{26, 59, 51, 50, 46, 97, 23, 66, 31, 42, 10, 29, 41, 4, 96, 58, 66}, Nedelja.sortedZeros(new int[]{26, 59, 51, 50, 46, 97, 23, 66, 31, 42, 10, 29, 41, 4, 96, 58, 66}));
assertEquals(new int[]{30, 53, 73, 82, 64, 42, 25, 65, 48, 36, 10, 35, 14, 33, 51, 21, 37, 19}, Nedelja.sortedZeros(new int[]{30, 53, 73, 82, 64, 42, 25, 65, 48, 36, 10, 35, 14, 33, 51, 21, 37, 19}));
assertEquals(new int[]{54, 54, 85, 18, 35, 13, 13, 34, 13, 74, 87, 29}, Nedelja.sortedZeros(new int[]{54, 54, 85, 18, 35, 13, 13, 34, 13, 74, 87, 29}));
assertEquals(new int[]{40, 80, 1, 61, 84, 11, 30, 69, 81, 56, 77, 7}, Nedelja.sortedZeros(new int[]{40, 80, 1, 61, 84, 11, 30, 69, 81, 56, 77, 7}));
assertEquals(new int[]{36, 21, 56, 42, 26, 97, 23, 90, 58, 87, 85, 77}, Nedelja.sortedZeros(new int[]{36, 21, 56, 42, 26, 97, 23, 90, 58, 87, 85, 77}));
assertEquals(new int[]{40, 23, 32, 71, 4, 93, 78, 48, 59, 82, 31, 73, 88, 71, 59, 19, 95, 1, 11}, Nedelja.sortedZeros(new int[]{40, 23, 32, 71, 4, 93, 78, 48, 59, 82, 31, 73, 88, 71, 59, 19, 95, 1, 11}));
assertEquals(new int[]{79, 28, 13, 0}, Nedelja.sortedZeros(new int[]{79, 28, 0, 13}));
assertEquals(new int[]{51, 73, 65, 95, 68, 27, 2, 49, 29, 80, 99, 88, 46, 22, 33, 47, 15, 36}, Nedelja.sortedZeros(new int[]{51, 73, 65, 95, 68, 27, 2, 49, 29, 80, 99, 88, 46, 22, 33, 47, 15, 36}));
assertEquals(new int[]{88, 8, 10, 27, 84, 31, 9, 60, 22}, Nedelja.sortedZeros(new int[]{88, 8, 10, 27, 84, 31, 9, 60, 22}));
assertEquals(new int[]{57, 77, 65, 16, 58, 50, 41, 70, 72, 11, 37, 81, 53, 62, 82, 53, 10, 67}, Nedelja.sortedZeros(new int[]{57, 77, 65, 16, 58, 50, 41, 70, 72, 11, 37, 81, 53, 62, 82, 53, 10, 67}));
assertEquals(new int[]{3, 18, 13, 69, 86, 1, 83, 57, 83, 19, 37, 18, 10, 70, 28, 14, 64, 75, 58}, Nedelja.sortedZeros(new int[]{3, 18, 13, 69, 86, 1, 83, 57, 83, 19, 37, 18, 10, 70, 28, 14, 64, 75, 58}));
assertEquals(new int[]{61, 17, 6, 93, 81, 82, 47, 30, 38, 55, 13, 93, 12, 64, 47, 62, 57, 60}, Nedelja.sortedZeros(new int[]{61, 17, 6, 93, 81, 82, 47, 30, 38, 55, 13, 93, 12, 64, 47, 62, 57, 60}));
assertEquals(new int[]{67, 29, 87, 69, 50, 82}, Nedelja.sortedZeros(new int[]{67, 29, 87, 69, 50, 82}));
assertEquals(new int[]{82, 83, 72, 15, 30, 80, 2, 2, 74, 0}, Nedelja.sortedZeros(new int[]{82, 83, 72, 15, 0, 30, 80, 2, 2, 74}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{59, 74, 69, 1, 66, 53, 6, 24, 16, 51, 29, 33, 99, 70, 56, 56}, Nedelja.sortedZeros(new int[]{59, 74, 69, 1, 66, 53, 6, 24, 16, 51, 29, 33, 99, 70, 56, 56}));
assertEquals(new int[]{87, 9, 11, 70, 28, 42, 44, 47}, Nedelja.sortedZeros(new int[]{87, 9, 11, 70, 28, 42, 44, 47}));
assertEquals(new int[]{56, 73, 18, 83, 34, 82, 73}, Nedelja.sortedZeros(new int[]{56, 73, 18, 83, 34, 82, 73}));
assertEquals(new int[]{28, 84, 76, 96, 49, 37}, Nedelja.sortedZeros(new int[]{28, 84, 76, 96, 49, 37}));
assertEquals(new int[]{63, 88, 59, 94, 17, 24, 90, 55, 80, 83, 64, 76, 12, 10, 37}, Nedelja.sortedZeros(new int[]{63, 88, 59, 94, 17, 24, 90, 55, 80, 83, 64, 76, 12, 10, 37}));
assertEquals(new int[]{91, 51, 63, 72, 74, 54, 46, 98}, Nedelja.sortedZeros(new int[]{91, 51, 63, 72, 74, 54, 46, 98}));
assertEquals(new int[]{16, 36, 3, 62}, Nedelja.sortedZeros(new int[]{16, 36, 3, 62}));
assertEquals(new int[]{80, 94, 77, 61, 73, 2, 71}, Nedelja.sortedZeros(new int[]{80, 94, 77, 61, 73, 2, 71}));
assertEquals(new int[]{33, 29, 79, 92, 16, 1, 33, 87, 42, 50}, Nedelja.sortedZeros(new int[]{33, 29, 79, 92, 16, 1, 33, 87, 42, 50}));
assertEquals(new int[]{24, 14, 99, 79, 22, 65, 80, 59, 69, 2, 86, 41, 35, 43, 13, 69}, Nedelja.sortedZeros(new int[]{24, 14, 99, 79, 22, 65, 80, 59, 69, 2, 86, 41, 35, 43, 13, 69}));
assertEquals(new int[]{33, 17, 49, 18, 90, 94, 78, 59, 12, 49, 66, 24, 65, 6, 88, 28, 15, 94}, Nedelja.sortedZeros(new int[]{33, 17, 49, 18, 90, 94, 78, 59, 12, 49, 66, 24, 65, 6, 88, 28, 15, 94}));
assertEquals(new int[]{1, 35, 22, 55, 13, 88, 48, 39, 77, 28, 20, 71, 42}, Nedelja.sortedZeros(new int[]{1, 35, 22, 55, 13, 88, 48, 39, 77, 28, 20, 71, 42}));
assertEquals(new int[]{2, 87, 6, 30, 36, 87, 3, 88, 41, 41, 2, 84, 21, 18}, Nedelja.sortedZeros(new int[]{2, 87, 6, 30, 36, 87, 3, 88, 41, 41, 2, 84, 21, 18}));
assertEquals(new int[]{65, 81, 12, 3}, Nedelja.sortedZeros(new int[]{65, 81, 12, 3}));
assertEquals(new int[]{32, 71, 31, 33, 16, 58, 45, 71, 53, 60, 30, 82, 68, 33, 49, 19}, Nedelja.sortedZeros(new int[]{32, 71, 31, 33, 16, 58, 45, 71, 53, 60, 30, 82, 68, 33, 49, 19}));
assertEquals(new int[]{23, 26, 56, 52, 39, 41, 83, 96, 42, 16}, Nedelja.sortedZeros(new int[]{23, 26, 56, 52, 39, 41, 83, 96, 42, 16}));
assertEquals(new int[]{10, 14, 56, 98, 92, 35, 69, 1, 78, 13, 9, 96, 31}, Nedelja.sortedZeros(new int[]{10, 14, 56, 98, 92, 35, 69, 1, 78, 13, 9, 96, 31}));
assertEquals(new int[]{78, 1, 80, 62, 23, 74, 35, 32, 19, 15, 72, 13, 46, 16}, Nedelja.sortedZeros(new int[]{78, 1, 80, 62, 23, 74, 35, 32, 19, 15, 72, 13, 46, 16}));
assertEquals(new int[]{99, 42, 34, 71, 13, 6, 22, 59, 72, 54, 6}, Nedelja.sortedZeros(new int[]{99, 42, 34, 71, 13, 6, 22, 59, 72, 54, 6}));
assertEquals(new int[]{58, 73, 84, 3, 42, 95, 59, 91, 18, 46}, Nedelja.sortedZeros(new int[]{58, 73, 84, 3, 42, 95, 59, 91, 18, 46}));
assertEquals(new int[]{84, 35, 7, 82, 98, 38, 68, 95, 18}, Nedelja.sortedZeros(new int[]{84, 35, 7, 82, 98, 38, 68, 95, 18}));
assertEquals(new int[]{37, 44, 41, 48, 31, 17, 84, 64, 42, 58, 86}, Nedelja.sortedZeros(new int[]{37, 44, 41, 48, 31, 17, 84, 64, 42, 58, 86}));
assertEquals(new int[]{55, 78, 30, 61, 80, 17, 95, 84, 19, 18, 39}, Nedelja.sortedZeros(new int[]{55, 78, 30, 61, 80, 17, 95, 84, 19, 18, 39}));
assertEquals(new int[]{52, 40, 82, 90, 97, 87, 82, 69, 91, 53, 40, 91, 59, 28, 97, 34, 0, 0}, Nedelja.sortedZeros(new int[]{0, 52, 40, 82, 90, 97, 87, 82, 69, 91, 53, 40, 91, 0, 59, 28, 97, 34}));
assertEquals(new int[]{57, 86, 2, 88, 73, 54, 51, 9, 67, 77, 49, 39, 7, 88, 80, 66, 7, 47}, Nedelja.sortedZeros(new int[]{57, 86, 2, 88, 73, 54, 51, 9, 67, 77, 49, 39, 7, 88, 80, 66, 7, 47}));
assertEquals(new int[]{67}, Nedelja.sortedZeros(new int[]{67}));
assertEquals(new int[]{76, 81, 87, 88, 96, 79, 92, 26, 84}, Nedelja.sortedZeros(new int[]{76, 81, 87, 88, 96, 79, 92, 26, 84}));
assertEquals(new int[]{80, 12, 39, 13, 92, 83, 12, 52, 83, 18, 78, 17, 9, 34}, Nedelja.sortedZeros(new int[]{80, 12, 39, 13, 92, 83, 12, 52, 83, 18, 78, 17, 9, 34}));
assertEquals(new int[]{94, 58, 85, 63, 71, 1, 50, 32}, Nedelja.sortedZeros(new int[]{94, 58, 85, 63, 71, 1, 50, 32}));
assertEquals(new int[]{91, 7, 1, 24, 1, 96, 97, 93, 54}, Nedelja.sortedZeros(new int[]{91, 7, 1, 24, 1, 96, 97, 93, 54}));
assertEquals(new int[]{77}, Nedelja.sortedZeros(new int[]{77}));
assertEquals(new int[]{56, 97, 7, 54, 27, 75, 5, 6, 66, 32, 65, 23, 6, 56, 13}, Nedelja.sortedZeros(new int[]{56, 97, 7, 54, 27, 75, 5, 6, 66, 32, 65, 23, 6, 56, 13}));
assertEquals(new int[]{40, 69, 41, 87, 27, 74, 28, 60, 36, 10, 4, 51, 91, 20, 36, 61, 65, 85, 49}, Nedelja.sortedZeros(new int[]{40, 69, 41, 87, 27, 74, 28, 60, 36, 10, 4, 51, 91, 20, 36, 61, 65, 85, 49}));
assertEquals(new int[]{67, 28, 6, 10, 55, 30, 35, 59, 12, 89, 13, 52, 29, 39, 55, 31, 35}, Nedelja.sortedZeros(new int[]{67, 28, 6, 10, 55, 30, 35, 59, 12, 89, 13, 52, 29, 39, 55, 31, 35}));
assertEquals(new int[]{10, 82}, Nedelja.sortedZeros(new int[]{10, 82}));
assertEquals(new int[]{55, 20, 99, 81, 17}, Nedelja.sortedZeros(new int[]{55, 20, 99, 81, 17}));
assertEquals(new int[]{70, 81, 69}, Nedelja.sortedZeros(new int[]{70, 81, 69}));
assertEquals(new int[]{49, 32, 9, 43, 62, 11, 26, 5}, Nedelja.sortedZeros(new int[]{49, 32, 9, 43, 62, 11, 26, 5}));
assertEquals(new int[]{39, 90, 38, 7, 30, 48, 14, 29}, Nedelja.sortedZeros(new int[]{39, 90, 38, 7, 30, 48, 14, 29}));
assertEquals(new int[]{95, 64, 1, 61, 40, 12}, Nedelja.sortedZeros(new int[]{95, 64, 1, 61, 40, 12}));
assertEquals(new int[]{70, 49, 26, 83, 72, 38, 27, 22, 54, 11, 84, 94, 38, 1, 8, 64, 61}, Nedelja.sortedZeros(new int[]{70, 49, 26, 83, 72, 38, 27, 22, 54, 11, 84, 94, 38, 1, 8, 64, 61}));
assertEquals(new int[]{55, 96, 56}, Nedelja.sortedZeros(new int[]{55, 96, 56}));
assertEquals(new int[]{14, 67, 20, 68, 83, 13, 64, 30, 13, 87, 38, 95, 12}, Nedelja.sortedZeros(new int[]{14, 67, 20, 68, 83, 13, 64, 30, 13, 87, 38, 95, 12}));
assertEquals(new int[]{63, 83, 79, 86, 1, 27, 3}, Nedelja.sortedZeros(new int[]{63, 83, 79, 86, 1, 27, 3}));
assertEquals(new int[]{25, 65}, Nedelja.sortedZeros(new int[]{25, 65}));
assertEquals(new int[]{8, 61, 38, 93, 5, 38, 3, 1, 8, 50, 14, 58, 87, 41, 2, 79, 30, 97}, Nedelja.sortedZeros(new int[]{8, 61, 38, 93, 5, 38, 3, 1, 8, 50, 14, 58, 87, 41, 2, 79, 30, 97}));
assertEquals(new int[]{50, 16, 17, 64}, Nedelja.sortedZeros(new int[]{50, 16, 17, 64}));
assertEquals(new int[]{75, 39, 20, 19, 6, 74, 32, 87, 3, 39, 86, 27, 82, 20, 66, 86, 56, 71, 24}, Nedelja.sortedZeros(new int[]{75, 39, 20, 19, 6, 74, 32, 87, 3, 39, 86, 27, 82, 20, 66, 86, 56, 71, 24}));
assertEquals(new int[]{90, 10, 25, 57}, Nedelja.sortedZeros(new int[]{90, 10, 25, 57}));
assertEquals(new int[]{18, 62, 46, 91, 36, 98, 37, 57, 2, 9, 51, 77, 66, 6, 85, 9, 49}, Nedelja.sortedZeros(new int[]{18, 62, 46, 91, 36, 98, 37, 57, 2, 9, 51, 77, 66, 6, 85, 9, 49}));
assertEquals(new int[]{96, 75, 69, 79, 90, 43, 33, 2, 28, 24, 81, 72, 87, 63, 79}, Nedelja.sortedZeros(new int[]{96, 75, 69, 79, 90, 43, 33, 2, 28, 24, 81, 72, 87, 63, 79}));
assertEquals(new int[]{58, 55, 88, 70, 74, 37, 11}, Nedelja.sortedZeros(new int[]{58, 55, 88, 70, 74, 37, 11}));
assertEquals(new int[]{1, 97, 38, 8, 52, 25, 64, 19, 39, 92, 21, 1, 8, 50, 6, 98, 30, 98}, Nedelja.sortedZeros(new int[]{1, 97, 38, 8, 52, 25, 64, 19, 39, 92, 21, 1, 8, 50, 6, 98, 30, 98}));
assertEquals(new int[]{47, 22, 10, 44, 87, 48, 3, 64, 73, 74}, Nedelja.sortedZeros(new int[]{47, 22, 10, 44, 87, 48, 3, 64, 73, 74}));
assertEquals(new int[]{96, 87, 62, 84, 17, 67, 25, 60, 65, 65, 90, 40, 74, 2, 0}, Nedelja.sortedZeros(new int[]{96, 87, 62, 84, 0, 17, 67, 25, 60, 65, 65, 90, 40, 74, 2}));
assertEquals(new int[]{21, 59, 16, 19, 26, 45, 81, 84}, Nedelja.sortedZeros(new int[]{21, 59, 16, 19, 26, 45, 81, 84}));
assertEquals(new int[]{21, 64, 30, 55, 70, 2, 65, 56, 88, 52, 13}, Nedelja.sortedZeros(new int[]{21, 64, 30, 55, 70, 2, 65, 56, 88, 52, 13}));
assertEquals(new int[]{40, 80, 13, 34, 86, 33, 84, 18, 6, 22, 31, 41, 7}, Nedelja.sortedZeros(new int[]{40, 80, 13, 34, 86, 33, 84, 18, 6, 22, 31, 41, 7}));
assertEquals(new int[]{9, 63, 34, 19, 12, 75, 16, 36, 59}, Nedelja.sortedZeros(new int[]{9, 63, 34, 19, 12, 75, 16, 36, 59}));
assertEquals(new int[]{86, 50, 67, 40, 70, 70, 43, 9, 7, 1}, Nedelja.sortedZeros(new int[]{86, 50, 67, 40, 70, 70, 43, 9, 7, 1}));
assertEquals(new int[]{36, 67}, Nedelja.sortedZeros(new int[]{36, 67}));
assertEquals(new int[]{90, 80, 65, 42, 78, 53, 47, 36, 54, 53, 62, 26, 84, 9, 22}, Nedelja.sortedZeros(new int[]{90, 80, 65, 42, 78, 53, 47, 36, 54, 53, 62, 26, 84, 9, 22}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{82, 16, 94, 53, 54, 81, 74, 56, 92, 9, 61, 36, 29, 29, 76, 0}, Nedelja.sortedZeros(new int[]{82, 16, 94, 53, 54, 0, 81, 74, 56, 92, 9, 61, 36, 29, 29, 76}));
assertEquals(new int[]{10, 35, 92, 89, 91, 26, 63}, Nedelja.sortedZeros(new int[]{10, 35, 92, 89, 91, 26, 63}));
assertEquals(new int[]{88}, Nedelja.sortedZeros(new int[]{88}));
assertEquals(new int[]{84, 7, 95, 71, 49, 48, 70, 73, 14, 92}, Nedelja.sortedZeros(new int[]{84, 7, 95, 71, 49, 48, 70, 73, 14, 92}));
assertEquals(new int[]{23, 26, 88, 53, 86, 69, 8, 82, 8, 62, 36, 39, 56, 82, 69}, Nedelja.sortedZeros(new int[]{23, 26, 88, 53, 86, 69, 8, 82, 8, 62, 36, 39, 56, 82, 69}));
assertEquals(new int[]{29, 69, 88}, Nedelja.sortedZeros(new int[]{29, 69, 88}));
assertEquals(new int[]{54, 24, 49, 63, 80, 47, 21, 28}, Nedelja.sortedZeros(new int[]{54, 24, 49, 63, 80, 47, 21, 28}));
assertEquals(new int[]{14, 92, 96, 39, 47, 78, 8, 82, 54, 45, 89, 83, 20, 68, 66, 69, 13, 68}, Nedelja.sortedZeros(new int[]{14, 92, 96, 39, 47, 78, 8, 82, 54, 45, 89, 83, 20, 68, 66, 69, 13, 68}));
assertEquals(new int[]{60, 43, 44, 99, 73, 27, 75, 4}, Nedelja.sortedZeros(new int[]{60, 43, 44, 99, 73, 27, 75, 4}));
assertEquals(new int[]{43, 36}, Nedelja.sortedZeros(new int[]{43, 36}));
assertEquals(new int[]{54, 71, 15, 53, 36, 43, 52}, Nedelja.sortedZeros(new int[]{54, 71, 15, 53, 36, 43, 52}));
assertEquals(new int[]{1, 36, 96, 73, 5}, Nedelja.sortedZeros(new int[]{1, 36, 96, 73, 5}));
assertEquals(new int[]{72, 20, 82}, Nedelja.sortedZeros(new int[]{72, 20, 82}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{35, 14}, Nedelja.sortedZeros(new int[]{35, 14}));
assertEquals(new int[]{95, 26, 13, 34, 62, 21, 0}, Nedelja.sortedZeros(new int[]{95, 0, 26, 13, 34, 62, 21}));
assertEquals(new int[]{21, 16, 16, 56}, Nedelja.sortedZeros(new int[]{21, 16, 16, 56}));
assertEquals(new int[]{44, 69, 31, 69, 46, 7, 43, 29, 32, 37, 80}, Nedelja.sortedZeros(new int[]{44, 69, 31, 69, 46, 7, 43, 29, 32, 37, 80}));
assertEquals(new int[]{75, 16, 36, 99, 36, 57, 59, 23, 71, 36, 28, 59, 80, 73, 69}, Nedelja.sortedZeros(new int[]{75, 16, 36, 99, 36, 57, 59, 23, 71, 36, 28, 59, 80, 73, 69}));
assertEquals(new int[]{5, 65, 23, 76, 17, 44, 23, 38, 23, 67}, Nedelja.sortedZeros(new int[]{5, 65, 23, 76, 17, 44, 23, 38, 23, 67}));
assertEquals(new int[]{17, 94, 23, 71, 76, 96, 2, 99, 35}, Nedelja.sortedZeros(new int[]{17, 94, 23, 71, 76, 96, 2, 99, 35}));
assertEquals(new int[]{47, 49, 92}, Nedelja.sortedZeros(new int[]{47, 49, 92}));
assertEquals(new int[]{76, 85, 68, 60, 33, 59, 29, 16, 24, 60, 49, 37, 58, 30, 43, 98, 6}, Nedelja.sortedZeros(new int[]{76, 85, 68, 60, 33, 59, 29, 16, 24, 60, 49, 37, 58, 30, 43, 98, 6}));
assertEquals(new int[]{53, 82, 74, 13, 4}, Nedelja.sortedZeros(new int[]{53, 82, 74, 13, 4}));
assertEquals(new int[]{89, 49, 13, 53}, Nedelja.sortedZeros(new int[]{89, 49, 13, 53}));
assertEquals(new int[]{17, 98, 58, 46, 40, 85, 50, 64, 91, 82, 32, 84, 68, 53, 73, 53}, Nedelja.sortedZeros(new int[]{17, 98, 58, 46, 40, 85, 50, 64, 91, 82, 32, 84, 68, 53, 73, 53}));
assertEquals(new int[]{9, 92, 97, 35, 84, 19, 85, 17, 63, 50, 97, 6, 98, 42, 68, 76, 43, 19}, Nedelja.sortedZeros(new int[]{9, 92, 97, 35, 84, 19, 85, 17, 63, 50, 97, 6, 98, 42, 68, 76, 43, 19}));
assertEquals(new int[]{82, 99, 50, 51, 30, 95, 13, 57, 60, 74, 23, 97, 34, 87}, Nedelja.sortedZeros(new int[]{82, 99, 50, 51, 30, 95, 13, 57, 60, 74, 23, 97, 34, 87}));
assertEquals(new int[]{70, 27, 79, 46, 71}, Nedelja.sortedZeros(new int[]{70, 27, 79, 46, 71}));
assertEquals(new int[]{61, 89, 76, 62, 53, 15, 14, 8, 26}, Nedelja.sortedZeros(new int[]{61, 89, 76, 62, 53, 15, 14, 8, 26}));
assertEquals(new int[]{17, 60, 29, 54, 57, 86, 64, 38, 55, 94, 35, 46, 97, 47, 57, 62}, Nedelja.sortedZeros(new int[]{17, 60, 29, 54, 57, 86, 64, 38, 55, 94, 35, 46, 97, 47, 57, 62}));
assertEquals(new int[]{83, 11, 71, 35, 7, 75, 84, 1, 25}, Nedelja.sortedZeros(new int[]{83, 11, 71, 35, 7, 75, 84, 1, 25}));
assertEquals(new int[]{2, 55, 64, 70, 85, 55, 26, 31, 4, 96, 11, 72, 68, 98, 21}, Nedelja.sortedZeros(new int[]{2, 55, 64, 70, 85, 55, 26, 31, 4, 96, 11, 72, 68, 98, 21}));
assertEquals(new int[]{35, 26, 94, 70, 81, 10, 68, 73, 42, 52, 55}, Nedelja.sortedZeros(new int[]{35, 26, 94, 70, 81, 10, 68, 73, 42, 52, 55}));
assertEquals(new int[]{7, 92, 83, 78, 6, 96, 77, 68}, Nedelja.sortedZeros(new int[]{7, 92, 83, 78, 6, 96, 77, 68}));
assertEquals(new int[]{21, 6, 19, 78, 34, 25, 93, 35, 39, 61, 29, 6, 88, 39}, Nedelja.sortedZeros(new int[]{21, 6, 19, 78, 34, 25, 93, 35, 39, 61, 29, 6, 88, 39}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{75, 21, 15, 45, 89, 33, 86, 52, 52, 92, 64, 10, 81}, Nedelja.sortedZeros(new int[]{75, 21, 15, 45, 89, 33, 86, 52, 52, 92, 64, 10, 81}));
assertEquals(new int[]{52}, Nedelja.sortedZeros(new int[]{52}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{19, 2, 0}, Nedelja.sortedZeros(new int[]{0, 19, 2}));
assertEquals(new int[]{62, 20, 52, 22}, Nedelja.sortedZeros(new int[]{62, 20, 52, 22}));
assertEquals(new int[]{33, 15}, Nedelja.sortedZeros(new int[]{33, 15}));
assertEquals(new int[]{4, 46, 42, 14, 56, 5, 28, 40, 37, 34, 62, 36, 97, 63, 5, 91, 4, 93}, Nedelja.sortedZeros(new int[]{4, 46, 42, 14, 56, 5, 28, 40, 37, 34, 62, 36, 97, 63, 5, 91, 4, 93}));
assertEquals(new int[]{44, 97, 40, 79, 39, 48, 21, 56, 63, 73, 58, 71, 48, 7, 88, 0}, Nedelja.sortedZeros(new int[]{44, 97, 40, 79, 39, 48, 21, 56, 63, 73, 58, 0, 71, 48, 7, 88}));
assertEquals(new int[]{20, 44, 91, 98, 6, 82, 45, 62, 68, 41, 63, 15, 25, 23, 33, 27, 0}, Nedelja.sortedZeros(new int[]{0, 20, 44, 91, 98, 6, 82, 45, 62, 68, 41, 63, 15, 25, 23, 33, 27}));
assertEquals(new int[]{59, 75, 13, 68, 51, 94, 67, 46, 3, 76, 53, 37, 97, 52, 0}, Nedelja.sortedZeros(new int[]{59, 75, 0, 13, 68, 51, 94, 67, 46, 3, 76, 53, 37, 97, 52}));
assertEquals(new int[]{30, 11, 97, 95, 33, 40, 46, 5, 11, 35}, Nedelja.sortedZeros(new int[]{30, 11, 97, 95, 33, 40, 46, 5, 11, 35}));
assertEquals(new int[]{86, 24, 37, 29, 37, 14, 32, 46, 66, 83, 81, 60, 71, 79, 78, 65, 63}, Nedelja.sortedZeros(new int[]{86, 24, 37, 29, 37, 14, 32, 46, 66, 83, 81, 60, 71, 79, 78, 65, 63}));
assertEquals(new int[]{90, 66, 60, 1, 63, 1, 83, 12, 87, 83, 25}, Nedelja.sortedZeros(new int[]{90, 66, 60, 1, 63, 1, 83, 12, 87, 83, 25}));
assertEquals(new int[]{18, 14, 93, 77, 17, 48, 82, 56, 45, 79}, Nedelja.sortedZeros(new int[]{18, 14, 93, 77, 17, 48, 82, 56, 45, 79}));
assertEquals(new int[]{83, 6, 87, 42, 79, 75, 22}, Nedelja.sortedZeros(new int[]{83, 6, 87, 42, 79, 75, 22}));
assertEquals(new int[]{72, 53, 58}, Nedelja.sortedZeros(new int[]{72, 53, 58}));
assertEquals(new int[]{71, 48}, Nedelja.sortedZeros(new int[]{71, 48}));
assertEquals(new int[]{84, 20, 22, 6}, Nedelja.sortedZeros(new int[]{84, 20, 22, 6}));
assertEquals(new int[]{75, 88, 10, 42, 99}, Nedelja.sortedZeros(new int[]{75, 88, 10, 42, 99}));
assertEquals(new int[]{55, 14, 68, 42, 32, 9, 74, 19, 55, 39, 25, 75, 64, 6}, Nedelja.sortedZeros(new int[]{55, 14, 68, 42, 32, 9, 74, 19, 55, 39, 25, 75, 64, 6}));
assertEquals(new int[]{56}, Nedelja.sortedZeros(new int[]{56}));
assertEquals(new int[]{83, 8, 61, 11, 7, 10, 48, 78}, Nedelja.sortedZeros(new int[]{83, 8, 61, 11, 7, 10, 48, 78}));
assertEquals(new int[]{17, 12, 25, 92, 83, 96, 69, 65, 15, 72, 91, 54, 59, 57, 68, 59, 90, 0}, Nedelja.sortedZeros(new int[]{17, 12, 0, 25, 92, 83, 96, 69, 65, 15, 72, 91, 54, 59, 57, 68, 59, 90}));
assertEquals(new int[]{61, 59, 12, 88, 78}, Nedelja.sortedZeros(new int[]{61, 59, 12, 88, 78}));
assertEquals(new int[]{92, 59, 50, 68, 44, 64, 75, 24, 89, 33, 78, 20, 92, 61, 44, 82, 22, 29, 1}, Nedelja.sortedZeros(new int[]{92, 59, 50, 68, 44, 64, 75, 24, 89, 33, 78, 20, 92, 61, 44, 82, 22, 29, 1}));
assertEquals(new int[]{36, 76, 62, 79, 24, 85, 18, 89, 63, 4, 52, 48, 27, 46, 11, 9, 16, 19}, Nedelja.sortedZeros(new int[]{36, 76, 62, 79, 24, 85, 18, 89, 63, 4, 52, 48, 27, 46, 11, 9, 16, 19}));
assertEquals(new int[]{50, 20, 33, 58, 22, 93, 80, 46, 79, 18, 43, 4, 58}, Nedelja.sortedZeros(new int[]{50, 20, 33, 58, 22, 93, 80, 46, 79, 18, 43, 4, 58}));
assertEquals(new int[]{89, 86, 56, 51, 26, 45, 92, 48, 81, 9, 97, 92, 36, 3, 59, 99, 32, 0}, Nedelja.sortedZeros(new int[]{89, 86, 56, 51, 26, 0, 45, 92, 48, 81, 9, 97, 92, 36, 3, 59, 99, 32}));
assertEquals(new int[]{7, 60, 33, 40, 65, 46, 67, 82, 40, 64, 38, 69, 96, 71, 72, 29, 11, 0}, Nedelja.sortedZeros(new int[]{7, 60, 33, 40, 65, 46, 67, 82, 0, 40, 64, 38, 69, 96, 71, 72, 29, 11}));
assertEquals(new int[]{5, 55, 60, 50, 19}, Nedelja.sortedZeros(new int[]{5, 55, 60, 50, 19}));
assertEquals(new int[]{52, 77, 29, 51, 8, 58, 34}, Nedelja.sortedZeros(new int[]{52, 77, 29, 51, 8, 58, 34}));
assertEquals(new int[]{9, 6, 78, 11, 60, 86, 38, 91, 29, 21, 18, 35, 67, 69}, Nedelja.sortedZeros(new int[]{9, 6, 78, 11, 60, 86, 38, 91, 29, 21, 18, 35, 67, 69}));
assertEquals(new int[]{30, 94, 49, 44, 48, 19, 62, 83, 84, 23, 87, 50, 69, 56, 10, 42, 98, 23}, Nedelja.sortedZeros(new int[]{30, 94, 49, 44, 48, 19, 62, 83, 84, 23, 87, 50, 69, 56, 10, 42, 98, 23}));
assertEquals(new int[]{85, 39, 1, 94, 6, 33, 29, 95, 64, 93, 28, 34, 49}, Nedelja.sortedZeros(new int[]{85, 39, 1, 94, 6, 33, 29, 95, 64, 93, 28, 34, 49}));
assertEquals(new int[]{46, 9, 33, 90, 30, 81, 64, 71, 81, 36, 11, 33, 55, 31, 52, 9, 39, 56, 58}, Nedelja.sortedZeros(new int[]{46, 9, 33, 90, 30, 81, 64, 71, 81, 36, 11, 33, 55, 31, 52, 9, 39, 56, 58}));
assertEquals(new int[]{25, 40, 61, 24, 16, 15, 33, 45, 53, 28, 67}, Nedelja.sortedZeros(new int[]{25, 40, 61, 24, 16, 15, 33, 45, 53, 28, 67}));
assertEquals(new int[]{12, 24, 56, 33}, Nedelja.sortedZeros(new int[]{12, 24, 56, 33}));
assertEquals(new int[]{89, 9, 89, 47, 50}, Nedelja.sortedZeros(new int[]{89, 9, 89, 47, 50}));
assertEquals(new int[]{74, 28, 60, 8, 55, 57, 69, 78, 93, 83, 12, 34, 59}, Nedelja.sortedZeros(new int[]{74, 28, 60, 8, 55, 57, 69, 78, 93, 83, 12, 34, 59}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{18, 71, 1, 53, 99, 75, 92, 97, 55, 99, 18, 76, 97, 39}, Nedelja.sortedZeros(new int[]{18, 71, 1, 53, 99, 75, 92, 97, 55, 99, 18, 76, 97, 39}));
assertEquals(new int[]{75, 40, 22, 55, 77, 13, 39, 30, 74, 67, 54, 72, 32}, Nedelja.sortedZeros(new int[]{75, 40, 22, 55, 77, 13, 39, 30, 74, 67, 54, 72, 32}));
assertEquals(new int[]{17, 21, 89, 6, 33, 62, 10, 93, 6, 47, 49, 3, 42}, Nedelja.sortedZeros(new int[]{17, 21, 89, 6, 33, 62, 10, 93, 6, 47, 49, 3, 42}));
assertEquals(new int[]{55, 11, 24, 33, 75}, Nedelja.sortedZeros(new int[]{55, 11, 24, 33, 75}));
assertEquals(new int[]{28, 32, 71, 8, 61, 83, 61, 69, 90, 99, 84, 12, 52, 74, 45}, Nedelja.sortedZeros(new int[]{28, 32, 71, 8, 61, 83, 61, 69, 90, 99, 84, 12, 52, 74, 45}));
assertEquals(new int[]{6, 38, 74, 85, 27, 29, 79, 90, 33, 99, 95, 35, 60}, Nedelja.sortedZeros(new int[]{6, 38, 74, 85, 27, 29, 79, 90, 33, 99, 95, 35, 60}));
assertEquals(new int[]{37}, Nedelja.sortedZeros(new int[]{37}));
assertEquals(new int[]{5, 66, 34, 79, 86, 57, 12, 55, 95, 84, 66, 18, 30, 63, 80}, Nedelja.sortedZeros(new int[]{5, 66, 34, 79, 86, 57, 12, 55, 95, 84, 66, 18, 30, 63, 80}));
assertEquals(new int[]{31, 43, 7, 16, 83, 35, 52, 54, 72, 83, 87, 79, 22}, Nedelja.sortedZeros(new int[]{31, 43, 7, 16, 83, 35, 52, 54, 72, 83, 87, 79, 22}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{90, 93, 87, 78}, Nedelja.sortedZeros(new int[]{90, 93, 87, 78}));
assertEquals(new int[]{43, 77, 98, 61, 33, 78, 58, 86, 74, 69, 61, 16, 97, 34, 84, 70}, Nedelja.sortedZeros(new int[]{43, 77, 98, 61, 33, 78, 58, 86, 74, 69, 61, 16, 97, 34, 84, 70}));
assertEquals(new int[]{90, 2, 15, 22, 89, 29, 24, 1, 42, 25, 86, 53, 89}, Nedelja.sortedZeros(new int[]{90, 2, 15, 22, 89, 29, 24, 1, 42, 25, 86, 53, 89}));
assertEquals(new int[]{95, 43, 46, 3, 39, 82, 8, 29, 23, 41, 51, 59, 14, 42, 57, 55}, Nedelja.sortedZeros(new int[]{95, 43, 46, 3, 39, 82, 8, 29, 23, 41, 51, 59, 14, 42, 57, 55}));
assertEquals(new int[]{44, 54, 75, 54, 73, 34, 41, 95, 97}, Nedelja.sortedZeros(new int[]{44, 54, 75, 54, 73, 34, 41, 95, 97}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{25, 87, 94, 61, 9, 26, 60, 70, 42, 14, 53, 61, 25}, Nedelja.sortedZeros(new int[]{25, 87, 94, 61, 9, 26, 60, 70, 42, 14, 53, 61, 25}));
assertEquals(new int[]{73, 47, 52, 89, 34}, Nedelja.sortedZeros(new int[]{73, 47, 52, 89, 34}));
assertEquals(new int[]{45, 20, 45, 78}, Nedelja.sortedZeros(new int[]{45, 20, 45, 78}));
assertEquals(new int[]{24, 28, 2, 64, 32, 22, 5, 59, 75, 44, 52, 17, 30, 53, 71, 31, 86, 33, 94}, Nedelja.sortedZeros(new int[]{24, 28, 2, 64, 32, 22, 5, 59, 75, 44, 52, 17, 30, 53, 71, 31, 86, 33, 94}));
assertEquals(new int[]{91, 51, 36, 24, 95, 54, 40, 87, 15, 6, 73, 51, 87, 13, 64, 91, 87, 0}, Nedelja.sortedZeros(new int[]{91, 51, 36, 24, 95, 54, 40, 87, 15, 6, 73, 51, 0, 87, 13, 64, 91, 87}));
assertEquals(new int[]{55, 44, 12, 47, 52, 86, 65, 9, 8, 70, 39, 10, 51, 9, 29, 21, 60}, Nedelja.sortedZeros(new int[]{55, 44, 12, 47, 52, 86, 65, 9, 8, 70, 39, 10, 51, 9, 29, 21, 60}));
assertEquals(new int[]{11, 66, 56, 77, 73, 82}, Nedelja.sortedZeros(new int[]{11, 66, 56, 77, 73, 82}));
assertEquals(new int[]{80, 58, 81, 44, 84}, Nedelja.sortedZeros(new int[]{80, 58, 81, 44, 84}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{49, 64}, Nedelja.sortedZeros(new int[]{49, 64}));
assertEquals(new int[]{23, 39, 40, 36, 33, 71, 98, 69, 23}, Nedelja.sortedZeros(new int[]{23, 39, 40, 36, 33, 71, 98, 69, 23}));
assertEquals(new int[]{46, 74, 65, 95, 93, 50, 98, 63}, Nedelja.sortedZeros(new int[]{46, 74, 65, 95, 93, 50, 98, 63}));
assertEquals(new int[]{92, 21}, Nedelja.sortedZeros(new int[]{92, 21}));
assertEquals(new int[]{67, 87, 37, 37, 34}, Nedelja.sortedZeros(new int[]{67, 87, 37, 37, 34}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{21, 61, 37, 19, 73, 99, 22, 90, 97, 36, 8, 13, 69, 65, 7, 97, 54, 23, 47}, Nedelja.sortedZeros(new int[]{21, 61, 37, 19, 73, 99, 22, 90, 97, 36, 8, 13, 69, 65, 7, 97, 54, 23, 47}));
assertEquals(new int[]{38, 43, 43, 61, 29, 66, 97, 69, 63, 96, 2, 42}, Nedelja.sortedZeros(new int[]{38, 43, 43, 61, 29, 66, 97, 69, 63, 96, 2, 42}));
assertEquals(new int[]{61, 96, 28, 23, 99, 40, 97, 50, 83, 22, 69, 43, 45, 48, 44, 67, 72, 9, 22}, Nedelja.sortedZeros(new int[]{61, 96, 28, 23, 99, 40, 97, 50, 83, 22, 69, 43, 45, 48, 44, 67, 72, 9, 22}));
assertEquals(new int[]{94, 95, 11, 17, 1, 98, 89, 45, 91}, Nedelja.sortedZeros(new int[]{94, 95, 11, 17, 1, 98, 89, 45, 91}));
assertEquals(new int[]{20, 67, 57, 81, 14, 64, 2, 35, 35}, Nedelja.sortedZeros(new int[]{20, 67, 57, 81, 14, 64, 2, 35, 35}));
assertEquals(new int[]{95, 73}, Nedelja.sortedZeros(new int[]{95, 73}));
assertEquals(new int[]{92, 40, 89, 83, 7, 73, 6, 4, 34, 95, 90, 31, 14, 48}, Nedelja.sortedZeros(new int[]{92, 40, 89, 83, 7, 73, 6, 4, 34, 95, 90, 31, 14, 48}));
assertEquals(new int[]{17, 64, 73, 4}, Nedelja.sortedZeros(new int[]{17, 64, 73, 4}));
assertEquals(new int[]{53, 99, 36, 58, 25, 15, 72, 74, 39, 34, 76, 81, 37, 52, 97}, Nedelja.sortedZeros(new int[]{53, 99, 36, 58, 25, 15, 72, 74, 39, 34, 76, 81, 37, 52, 97}));
assertEquals(new int[]{52, 51, 17}, Nedelja.sortedZeros(new int[]{52, 51, 17}));
assertEquals(new int[]{88, 17, 50, 62, 55, 95, 78, 93, 25, 17, 72, 3}, Nedelja.sortedZeros(new int[]{88, 17, 50, 62, 55, 95, 78, 93, 25, 17, 72, 3}));
assertEquals(new int[]{18, 49, 27, 76, 37, 58, 15, 49, 38, 60, 79, 71, 34}, Nedelja.sortedZeros(new int[]{18, 49, 27, 76, 37, 58, 15, 49, 38, 60, 79, 71, 34}));
assertEquals(new int[]{89, 78, 50, 15, 45, 32, 31}, Nedelja.sortedZeros(new int[]{89, 78, 50, 15, 45, 32, 31}));
assertEquals(new int[]{88, 87, 31, 42, 20, 58, 35, 17, 62, 19, 61, 49, 66, 24, 31, 79, 71, 21, 24}, Nedelja.sortedZeros(new int[]{88, 87, 31, 42, 20, 58, 35, 17, 62, 19, 61, 49, 66, 24, 31, 79, 71, 21, 24}));
assertEquals(new int[]{5, 67, 15, 22, 89, 65, 87, 63, 25, 42, 87, 30, 18, 83}, Nedelja.sortedZeros(new int[]{5, 67, 15, 22, 89, 65, 87, 63, 25, 42, 87, 30, 18, 83}));
assertEquals(new int[]{61, 21, 44, 13, 40, 24, 48, 60, 16, 18, 48}, Nedelja.sortedZeros(new int[]{61, 21, 44, 13, 40, 24, 48, 60, 16, 18, 48}));
assertEquals(new int[]{74, 53}, Nedelja.sortedZeros(new int[]{74, 53}));
assertEquals(new int[]{8, 89, 37, 21, 53, 84}, Nedelja.sortedZeros(new int[]{8, 89, 37, 21, 53, 84}));
assertEquals(new int[]{41, 35, 44, 4, 87}, Nedelja.sortedZeros(new int[]{41, 35, 44, 4, 87}));
assertEquals(new int[]{75, 1, 88, 19, 85}, Nedelja.sortedZeros(new int[]{75, 1, 88, 19, 85}));
assertEquals(new int[]{55, 74, 57, 31, 63}, Nedelja.sortedZeros(new int[]{55, 74, 57, 31, 63}));
assertEquals(new int[]{25, 67, 49, 82, 25}, Nedelja.sortedZeros(new int[]{25, 67, 49, 82, 25}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{58, 77}, Nedelja.sortedZeros(new int[]{58, 77}));
assertEquals(new int[]{5, 12, 77, 6, 45, 24, 14, 90, 97, 10, 20, 54, 90, 70, 32, 95, 34}, Nedelja.sortedZeros(new int[]{5, 12, 77, 6, 45, 24, 14, 90, 97, 10, 20, 54, 90, 70, 32, 95, 34}));
assertEquals(new int[]{16, 91, 26, 75, 8, 8, 34, 54, 75, 29, 34, 61, 52, 42}, Nedelja.sortedZeros(new int[]{16, 91, 26, 75, 8, 8, 34, 54, 75, 29, 34, 61, 52, 42}));
assertEquals(new int[]{63, 18, 12, 76, 80, 64, 52, 84, 27, 0}, Nedelja.sortedZeros(new int[]{63, 0, 18, 12, 76, 80, 64, 52, 84, 27}));
assertEquals(new int[]{14, 60, 66, 39, 89}, Nedelja.sortedZeros(new int[]{14, 60, 66, 39, 89}));
assertEquals(new int[]{29}, Nedelja.sortedZeros(new int[]{29}));
assertEquals(new int[]{52, 43, 45, 41, 12, 42, 72, 90, 3, 28, 77, 87, 80, 10, 46, 80, 90, 52}, Nedelja.sortedZeros(new int[]{52, 43, 45, 41, 12, 42, 72, 90, 3, 28, 77, 87, 80, 10, 46, 80, 90, 52}));
assertEquals(new int[]{98, 2, 52, 96, 78, 38, 41, 7, 96, 16, 46, 38, 45, 31, 85, 79, 88, 31, 49}, Nedelja.sortedZeros(new int[]{98, 2, 52, 96, 78, 38, 41, 7, 96, 16, 46, 38, 45, 31, 85, 79, 88, 31, 49}));
assertEquals(new int[]{82, 7, 14, 90, 2, 2, 44}, Nedelja.sortedZeros(new int[]{82, 7, 14, 90, 2, 2, 44}));
assertEquals(new int[]{87, 77, 41, 8, 77, 5, 91, 43, 98, 46, 7, 69, 14, 48, 18}, Nedelja.sortedZeros(new int[]{87, 77, 41, 8, 77, 5, 91, 43, 98, 46, 7, 69, 14, 48, 18}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{83, 50, 55, 40, 29, 84, 58, 65}, Nedelja.sortedZeros(new int[]{83, 50, 55, 40, 29, 84, 58, 65}));
assertEquals(new int[]{67, 42, 57, 9, 15, 24, 84, 83, 56, 77, 62, 96, 83}, Nedelja.sortedZeros(new int[]{67, 42, 57, 9, 15, 24, 84, 83, 56, 77, 62, 96, 83}));
assertEquals(new int[]{33}, Nedelja.sortedZeros(new int[]{33}));
assertEquals(new int[]{53, 11, 61, 28, 78, 63, 32, 87, 21, 9, 14, 3, 11, 12, 1, 0, 0}, Nedelja.sortedZeros(new int[]{53, 11, 61, 28, 78, 0, 63, 32, 0, 87, 21, 9, 14, 3, 11, 12, 1}));
assertEquals(new int[]{32, 46, 41, 8, 77, 21, 70, 87, 68, 78, 70, 71, 46, 82}, Nedelja.sortedZeros(new int[]{32, 46, 41, 8, 77, 21, 70, 87, 68, 78, 70, 71, 46, 82}));
assertEquals(new int[]{28, 68, 5, 33, 84, 70, 7, 56, 45, 87, 52, 28}, Nedelja.sortedZeros(new int[]{28, 68, 5, 33, 84, 70, 7, 56, 45, 87, 52, 28}));
assertEquals(new int[]{73, 1, 98, 10, 71, 22, 26, 93, 53, 18, 69, 29, 69, 36}, Nedelja.sortedZeros(new int[]{73, 1, 98, 10, 71, 22, 26, 93, 53, 18, 69, 29, 69, 36}));
assertEquals(new int[]{38, 3, 31, 23, 54, 89, 57}, Nedelja.sortedZeros(new int[]{38, 3, 31, 23, 54, 89, 57}));
assertEquals(new int[]{27, 64, 69, 64, 75, 43, 36, 38, 53, 83, 44, 26, 80, 58, 46}, Nedelja.sortedZeros(new int[]{27, 64, 69, 64, 75, 43, 36, 38, 53, 83, 44, 26, 80, 58, 46}));
assertEquals(new int[]{59, 42, 55}, Nedelja.sortedZeros(new int[]{59, 42, 55}));
assertEquals(new int[]{33, 34, 83, 30, 93, 84}, Nedelja.sortedZeros(new int[]{33, 34, 83, 30, 93, 84}));
assertEquals(new int[]{46, 1, 84, 39, 55, 14, 47, 60, 84, 31, 84, 97, 95}, Nedelja.sortedZeros(new int[]{46, 1, 84, 39, 55, 14, 47, 60, 84, 31, 84, 97, 95}));
assertEquals(new int[]{75, 59, 92, 65, 14, 90}, Nedelja.sortedZeros(new int[]{75, 59, 92, 65, 14, 90}));
assertEquals(new int[]{89, 31, 28, 22, 81, 24, 69, 15, 15, 14, 48, 12, 42, 60, 55, 55, 0}, Nedelja.sortedZeros(new int[]{0, 89, 31, 28, 22, 81, 24, 69, 15, 15, 14, 48, 12, 42, 60, 55, 55}));
assertEquals(new int[]{80}, Nedelja.sortedZeros(new int[]{80}));
assertEquals(new int[]{48, 68}, Nedelja.sortedZeros(new int[]{48, 68}));
assertEquals(new int[]{39}, Nedelja.sortedZeros(new int[]{39}));
assertEquals(new int[]{31, 62, 13, 68, 23, 70, 16, 52, 59, 47, 66, 89, 56, 45, 23, 8, 25, 3}, Nedelja.sortedZeros(new int[]{31, 62, 13, 68, 23, 70, 16, 52, 59, 47, 66, 89, 56, 45, 23, 8, 25, 3}));
assertEquals(new int[]{50, 9, 71, 21, 22}, Nedelja.sortedZeros(new int[]{50, 9, 71, 21, 22}));
assertEquals(new int[]{88, 23, 28, 8, 74, 63, 68, 54, 67}, Nedelja.sortedZeros(new int[]{88, 23, 28, 8, 74, 63, 68, 54, 67}));
assertEquals(new int[]{13, 86, 58}, Nedelja.sortedZeros(new int[]{13, 86, 58}));
assertEquals(new int[]{37, 65, 26, 26, 98, 42, 35, 90}, Nedelja.sortedZeros(new int[]{37, 65, 26, 26, 98, 42, 35, 90}));
assertEquals(new int[]{39, 70, 66, 4, 54, 99, 90, 8, 1, 28, 28}, Nedelja.sortedZeros(new int[]{39, 70, 66, 4, 54, 99, 90, 8, 1, 28, 28}));
assertEquals(new int[]{91, 75, 16, 17, 62, 20, 64, 62, 89, 18}, Nedelja.sortedZeros(new int[]{91, 75, 16, 17, 62, 20, 64, 62, 89, 18}));
assertEquals(new int[]{43, 23, 46, 55, 11, 90, 24, 97, 6, 77, 9, 89, 21, 58, 86, 60, 18, 33, 79}, Nedelja.sortedZeros(new int[]{43, 23, 46, 55, 11, 90, 24, 97, 6, 77, 9, 89, 21, 58, 86, 60, 18, 33, 79}));
assertEquals(new int[]{29, 21, 10, 16, 99, 14, 57, 95, 63, 10, 66, 85, 17, 27, 6, 63}, Nedelja.sortedZeros(new int[]{29, 21, 10, 16, 99, 14, 57, 95, 63, 10, 66, 85, 17, 27, 6, 63}));
assertEquals(new int[]{77, 49, 41, 68, 97, 44, 2, 69}, Nedelja.sortedZeros(new int[]{77, 49, 41, 68, 97, 44, 2, 69}));
assertEquals(new int[]{67, 75, 77, 99, 32}, Nedelja.sortedZeros(new int[]{67, 75, 77, 99, 32}));
assertEquals(new int[]{50, 90, 77, 3, 8, 54, 88, 8, 23, 39, 53, 98, 97, 56, 13, 59, 41}, Nedelja.sortedZeros(new int[]{50, 90, 77, 3, 8, 54, 88, 8, 23, 39, 53, 98, 97, 56, 13, 59, 41}));
assertEquals(new int[]{48, 45, 50, 48, 20, 92, 17, 20, 64, 42, 68, 79, 89, 41, 86, 70}, Nedelja.sortedZeros(new int[]{48, 45, 50, 48, 20, 92, 17, 20, 64, 42, 68, 79, 89, 41, 86, 70}));
assertEquals(new int[]{1, 6, 86, 98, 52, 2, 31, 81, 21, 54, 98, 96, 2, 77, 98, 73}, Nedelja.sortedZeros(new int[]{1, 6, 86, 98, 52, 2, 31, 81, 21, 54, 98, 96, 2, 77, 98, 73}));
assertEquals(new int[]{12, 60, 23, 28, 46, 32, 13}, Nedelja.sortedZeros(new int[]{12, 60, 23, 28, 46, 32, 13}));
assertEquals(new int[]{96, 10, 91, 11, 1, 31, 59, 21, 96, 67, 87, 56, 34, 79}, Nedelja.sortedZeros(new int[]{96, 10, 91, 11, 1, 31, 59, 21, 96, 67, 87, 56, 34, 79}));
assertEquals(new int[]{98, 71, 8, 47, 80, 88}, Nedelja.sortedZeros(new int[]{98, 71, 8, 47, 80, 88}));
assertEquals(new int[]{37, 63, 48, 50, 27, 8, 81, 60, 8, 32, 72, 57}, Nedelja.sortedZeros(new int[]{37, 63, 48, 50, 27, 8, 81, 60, 8, 32, 72, 57}));
assertEquals(new int[]{13, 88, 88, 39, 77, 14, 31, 20, 72, 76, 19, 26, 7}, Nedelja.sortedZeros(new int[]{13, 88, 88, 39, 77, 14, 31, 20, 72, 76, 19, 26, 7}));
assertEquals(new int[]{81, 79, 19, 18, 7, 74, 17, 90}, Nedelja.sortedZeros(new int[]{81, 79, 19, 18, 7, 74, 17, 90}));
assertEquals(new int[]{63, 10, 50, 28, 75, 57, 24, 98, 17, 36, 40}, Nedelja.sortedZeros(new int[]{63, 10, 50, 28, 75, 57, 24, 98, 17, 36, 40}));
assertEquals(new int[]{11, 34, 45, 37, 13, 54, 75, 47, 21, 55, 88, 59, 17}, Nedelja.sortedZeros(new int[]{11, 34, 45, 37, 13, 54, 75, 47, 21, 55, 88, 59, 17}));
assertEquals(new int[]{4, 51}, Nedelja.sortedZeros(new int[]{4, 51}));
assertEquals(new int[]{1, 39, 2, 9, 85, 71, 21}, Nedelja.sortedZeros(new int[]{1, 39, 2, 9, 85, 71, 21}));
assertEquals(new int[]{43, 40, 45, 96, 86, 34, 4, 40, 74, 70, 41, 42, 51, 67}, Nedelja.sortedZeros(new int[]{43, 40, 45, 96, 86, 34, 4, 40, 74, 70, 41, 42, 51, 67}));
assertEquals(new int[]{6, 14, 23, 60, 14, 62, 71, 97, 4, 5, 20, 72, 17, 64, 55}, Nedelja.sortedZeros(new int[]{6, 14, 23, 60, 14, 62, 71, 97, 4, 5, 20, 72, 17, 64, 55}));
assertEquals(new int[]{6, 95, 20, 83, 57, 47, 53, 51, 90}, Nedelja.sortedZeros(new int[]{6, 95, 20, 83, 57, 47, 53, 51, 90}));
assertEquals(new int[]{30, 89, 68, 36, 98, 7, 46, 66, 15, 26, 85, 85, 65, 67, 36, 16, 65, 32, 53}, Nedelja.sortedZeros(new int[]{30, 89, 68, 36, 98, 7, 46, 66, 15, 26, 85, 85, 65, 67, 36, 16, 65, 32, 53}));
assertEquals(new int[]{42, 26, 88, 90, 73, 35, 97, 81, 18, 37, 75, 38, 21, 44, 3, 49, 70, 33, 38}, Nedelja.sortedZeros(new int[]{42, 26, 88, 90, 73, 35, 97, 81, 18, 37, 75, 38, 21, 44, 3, 49, 70, 33, 38}));
assertEquals(new int[]{86, 7, 73, 95, 1, 58, 30, 55, 14, 53, 65, 9, 63, 5, 68, 0}, Nedelja.sortedZeros(new int[]{86, 7, 73, 95, 1, 58, 30, 55, 14, 53, 65, 9, 63, 5, 0, 68}));
assertEquals(new int[]{51, 28, 39, 58}, Nedelja.sortedZeros(new int[]{51, 28, 39, 58}));
assertEquals(new int[]{47, 14, 13, 31}, Nedelja.sortedZeros(new int[]{47, 14, 13, 31}));
assertEquals(new int[]{76, 10, 60, 99, 19, 43, 60, 38, 41, 44, 22, 13, 26, 52, 81, 85, 94}, Nedelja.sortedZeros(new int[]{76, 10, 60, 99, 19, 43, 60, 38, 41, 44, 22, 13, 26, 52, 81, 85, 94}));
assertEquals(new int[]{87, 97, 43}, Nedelja.sortedZeros(new int[]{87, 97, 43}));
assertEquals(new int[]{29, 83, 7, 6, 92, 93, 91, 0}, Nedelja.sortedZeros(new int[]{29, 83, 7, 0, 6, 92, 93, 91}));
assertEquals(new int[]{89}, Nedelja.sortedZeros(new int[]{89}));
assertEquals(new int[]{72, 61, 76, 58, 24, 81, 66, 60}, Nedelja.sortedZeros(new int[]{72, 61, 76, 58, 24, 81, 66, 60}));
assertEquals(new int[]{76, 62}, Nedelja.sortedZeros(new int[]{76, 62}));
assertEquals(new int[]{57}, Nedelja.sortedZeros(new int[]{57}));
assertEquals(new int[]{40, 20}, Nedelja.sortedZeros(new int[]{40, 20}));
assertEquals(new int[]{5, 24, 44, 23, 50, 40, 71, 82, 30, 63, 89, 25, 63, 59, 45, 50, 46, 79}, Nedelja.sortedZeros(new int[]{5, 24, 44, 23, 50, 40, 71, 82, 30, 63, 89, 25, 63, 59, 45, 50, 46, 79}));
assertEquals(new int[]{68, 56, 14, 62, 96, 29, 44, 61, 88}, Nedelja.sortedZeros(new int[]{68, 56, 14, 62, 96, 29, 44, 61, 88}));
assertEquals(new int[]{2}, Nedelja.sortedZeros(new int[]{2}));
assertEquals(new int[]{78, 1, 72, 78, 60, 47, 72, 11, 93, 33, 30, 87, 62}, Nedelja.sortedZeros(new int[]{78, 1, 72, 78, 60, 47, 72, 11, 93, 33, 30, 87, 62}));
assertEquals(new int[]{61, 85, 31, 67, 43, 72, 22}, Nedelja.sortedZeros(new int[]{61, 85, 31, 67, 43, 72, 22}));
assertEquals(new int[]{67, 26, 25, 42, 80, 52, 83}, Nedelja.sortedZeros(new int[]{67, 26, 25, 42, 80, 52, 83}));
assertEquals(new int[]{56, 81, 48, 42, 43}, Nedelja.sortedZeros(new int[]{56, 81, 48, 42, 43}));
assertEquals(new int[]{56, 95, 26, 17}, Nedelja.sortedZeros(new int[]{56, 95, 26, 17}));
assertEquals(new int[]{17, 66, 80, 42, 78, 72, 58}, Nedelja.sortedZeros(new int[]{17, 66, 80, 42, 78, 72, 58}));
assertEquals(new int[]{41, 13, 77, 61, 49, 31, 38, 31, 5, 43, 20, 99}, Nedelja.sortedZeros(new int[]{41, 13, 77, 61, 49, 31, 38, 31, 5, 43, 20, 99}));
assertEquals(new int[]{94, 79, 26, 56, 53, 34, 68, 27, 19, 32, 32, 40, 44, 49, 47, 93}, Nedelja.sortedZeros(new int[]{94, 79, 26, 56, 53, 34, 68, 27, 19, 32, 32, 40, 44, 49, 47, 93}));
assertEquals(new int[]{44, 54, 1, 56, 72, 36, 18, 44, 41, 60, 49, 64, 58, 56, 44, 37}, Nedelja.sortedZeros(new int[]{44, 54, 1, 56, 72, 36, 18, 44, 41, 60, 49, 64, 58, 56, 44, 37}));
assertEquals(new int[]{5, 99, 50, 92, 63, 75, 69}, Nedelja.sortedZeros(new int[]{5, 99, 50, 92, 63, 75, 69}));
assertEquals(new int[]{6, 36, 69, 50}, Nedelja.sortedZeros(new int[]{6, 36, 69, 50}));
assertEquals(new int[]{66, 25, 32, 86, 68, 91, 94, 53, 24, 16, 16, 94}, Nedelja.sortedZeros(new int[]{66, 25, 32, 86, 68, 91, 94, 53, 24, 16, 16, 94}));
assertEquals(new int[]{86, 19, 30, 14, 77, 47, 74, 37, 68, 62, 7, 32, 44, 55}, Nedelja.sortedZeros(new int[]{86, 19, 30, 14, 77, 47, 74, 37, 68, 62, 7, 32, 44, 55}));
assertEquals(new int[]{58, 33, 41, 73, 71, 44, 71, 72, 57, 57, 83}, Nedelja.sortedZeros(new int[]{58, 33, 41, 73, 71, 44, 71, 72, 57, 57, 83}));
assertEquals(new int[]{74, 90, 87, 7, 20, 49, 46, 91, 47, 55, 82, 59, 0}, Nedelja.sortedZeros(new int[]{74, 90, 87, 7, 0, 20, 49, 46, 91, 47, 55, 82, 59}));
assertEquals(new int[]{82, 79, 50, 34, 43, 7, 48, 92, 23, 84, 16, 64, 38, 18, 95, 89, 82, 12}, Nedelja.sortedZeros(new int[]{82, 79, 50, 34, 43, 7, 48, 92, 23, 84, 16, 64, 38, 18, 95, 89, 82, 12}));
assertEquals(new int[]{31, 52}, Nedelja.sortedZeros(new int[]{31, 52}));
assertEquals(new int[]{63, 43, 49, 21, 18, 18, 68, 20}, Nedelja.sortedZeros(new int[]{63, 43, 49, 21, 18, 18, 68, 20}));
assertEquals(new int[]{66, 80, 2, 49}, Nedelja.sortedZeros(new int[]{66, 80, 2, 49}));
assertEquals(new int[]{63, 93, 30, 71, 11, 58, 24, 4, 45, 23, 78, 38}, Nedelja.sortedZeros(new int[]{63, 93, 30, 71, 11, 58, 24, 4, 45, 23, 78, 38}));
assertEquals(new int[]{44, 50, 43, 34, 9, 7, 10, 49, 9, 67, 15, 58}, Nedelja.sortedZeros(new int[]{44, 50, 43, 34, 9, 7, 10, 49, 9, 67, 15, 58}));
assertEquals(new int[]{3, 4, 13, 10, 60}, Nedelja.sortedZeros(new int[]{3, 4, 13, 10, 60}));
assertEquals(new int[]{29, 84, 27, 93, 34, 88, 20, 7, 54, 2, 41, 98, 80, 20, 7, 3, 66, 22}, Nedelja.sortedZeros(new int[]{29, 84, 27, 93, 34, 88, 20, 7, 54, 2, 41, 98, 80, 20, 7, 3, 66, 22}));
assertEquals(new int[]{99, 26, 87, 50}, Nedelja.sortedZeros(new int[]{99, 26, 87, 50}));
assertEquals(new int[]{92, 24, 94, 45, 29, 32, 94, 2, 90, 21, 10, 32}, Nedelja.sortedZeros(new int[]{92, 24, 94, 45, 29, 32, 94, 2, 90, 21, 10, 32}));
assertEquals(new int[]{87, 59, 1, 30, 27, 59, 72, 49, 95}, Nedelja.sortedZeros(new int[]{87, 59, 1, 30, 27, 59, 72, 49, 95}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{91, 40, 99, 77, 30}, Nedelja.sortedZeros(new int[]{91, 40, 99, 77, 30}));
assertEquals(new int[]{52, 63, 81, 12, 27, 56, 7, 25, 45, 43, 81, 0}, Nedelja.sortedZeros(new int[]{52, 63, 0, 81, 12, 27, 56, 7, 25, 45, 43, 81}));
assertEquals(new int[]{94, 85, 10, 74, 74, 15, 4, 76, 54, 42, 48, 45}, Nedelja.sortedZeros(new int[]{94, 85, 10, 74, 74, 15, 4, 76, 54, 42, 48, 45}));
assertEquals(new int[]{95, 53, 11, 89, 46, 94, 92, 72, 60, 89}, Nedelja.sortedZeros(new int[]{95, 53, 11, 89, 46, 94, 92, 72, 60, 89}));
assertEquals(new int[]{77, 20, 17, 15, 53, 76, 65}, Nedelja.sortedZeros(new int[]{77, 20, 17, 15, 53, 76, 65}));
assertEquals(new int[]{19, 29, 93, 42, 91, 24, 65, 49, 39, 20, 32, 82, 60}, Nedelja.sortedZeros(new int[]{19, 29, 93, 42, 91, 24, 65, 49, 39, 20, 32, 82, 60}));
assertEquals(new int[]{81, 20, 77, 73, 63, 9, 38, 8, 75, 75, 44, 79}, Nedelja.sortedZeros(new int[]{81, 20, 77, 73, 63, 9, 38, 8, 75, 75, 44, 79}));
assertEquals(new int[]{47, 66, 36, 17, 52, 11, 99, 23, 86, 15}, Nedelja.sortedZeros(new int[]{47, 66, 36, 17, 52, 11, 99, 23, 86, 15}));
assertEquals(new int[]{90, 27, 63, 81, 43, 30, 13, 45, 8, 21, 37, 39, 65, 0}, Nedelja.sortedZeros(new int[]{90, 27, 63, 81, 43, 30, 13, 45, 0, 8, 21, 37, 39, 65}));
assertEquals(new int[]{71, 35, 43, 39, 92, 89}, Nedelja.sortedZeros(new int[]{71, 35, 43, 39, 92, 89}));
assertEquals(new int[]{77, 19, 62, 98, 93, 81, 32, 96, 74, 18, 56, 53, 56, 41, 26, 67, 10, 89, 99}, Nedelja.sortedZeros(new int[]{77, 19, 62, 98, 93, 81, 32, 96, 74, 18, 56, 53, 56, 41, 26, 67, 10, 89, 99}));
assertEquals(new int[]{6, 17, 92, 87, 35, 35, 93}, Nedelja.sortedZeros(new int[]{6, 17, 92, 87, 35, 35, 93}));
assertEquals(new int[]{9, 4, 21, 15, 14, 92, 69, 31, 83, 67, 13, 75, 37, 41, 3, 82, 32}, Nedelja.sortedZeros(new int[]{9, 4, 21, 15, 14, 92, 69, 31, 83, 67, 13, 75, 37, 41, 3, 82, 32}));
assertEquals(new int[]{96, 29, 80, 44, 53}, Nedelja.sortedZeros(new int[]{96, 29, 80, 44, 53}));
assertEquals(new int[]{11, 11, 26}, Nedelja.sortedZeros(new int[]{11, 11, 26}));
assertEquals(new int[]{8, 23, 82, 14}, Nedelja.sortedZeros(new int[]{8, 23, 82, 14}));
assertEquals(new int[]{63, 74, 57, 39, 28, 46, 12}, Nedelja.sortedZeros(new int[]{63, 74, 57, 39, 28, 46, 12}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{65, 10, 22, 41, 36}, Nedelja.sortedZeros(new int[]{65, 10, 22, 41, 36}));
assertEquals(new int[]{1, 21, 86, 41, 96, 26, 27}, Nedelja.sortedZeros(new int[]{1, 21, 86, 41, 96, 26, 27}));
assertEquals(new int[]{27, 13, 26, 27, 31, 15}, Nedelja.sortedZeros(new int[]{27, 13, 26, 27, 31, 15}));
assertEquals(new int[]{57, 67, 58, 83, 9, 71, 81, 48, 49, 96, 9}, Nedelja.sortedZeros(new int[]{57, 67, 58, 83, 9, 71, 81, 48, 49, 96, 9}));
assertEquals(new int[]{73, 32, 57, 43, 87, 98, 86, 26, 70, 15, 98}, Nedelja.sortedZeros(new int[]{73, 32, 57, 43, 87, 98, 86, 26, 70, 15, 98}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{1, 21, 47, 66, 42, 75, 24, 64, 43, 84, 71, 62}, Nedelja.sortedZeros(new int[]{1, 21, 47, 66, 42, 75, 24, 64, 43, 84, 71, 62}));
assertEquals(new int[]{73, 23, 50, 3, 47, 31, 39, 7}, Nedelja.sortedZeros(new int[]{73, 23, 50, 3, 47, 31, 39, 7}));
assertEquals(new int[]{39, 36, 49, 65}, Nedelja.sortedZeros(new int[]{39, 36, 49, 65}));
assertEquals(new int[]{4, 34, 71, 38, 30, 98, 76}, Nedelja.sortedZeros(new int[]{4, 34, 71, 38, 30, 98, 76}));
assertEquals(new int[]{59, 6}, Nedelja.sortedZeros(new int[]{59, 6}));
assertEquals(new int[]{4, 7, 91}, Nedelja.sortedZeros(new int[]{4, 7, 91}));
assertEquals(new int[]{64, 1, 65, 15, 75, 84}, Nedelja.sortedZeros(new int[]{64, 1, 65, 15, 75, 84}));
assertEquals(new int[]{20, 6, 34}, Nedelja.sortedZeros(new int[]{20, 6, 34}));
assertEquals(new int[]{28}, Nedelja.sortedZeros(new int[]{28}));
assertEquals(new int[]{58, 52, 74, 57, 54, 88, 39, 29}, Nedelja.sortedZeros(new int[]{58, 52, 74, 57, 54, 88, 39, 29}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{11, 57, 34, 9, 95, 10, 23, 11, 92, 26, 20, 46, 46, 52, 81, 17, 31, 7, 0}, Nedelja.sortedZeros(new int[]{11, 57, 34, 9, 95, 10, 23, 11, 92, 26, 20, 46, 46, 52, 81, 0, 17, 31, 7}));
assertEquals(new int[]{35, 68, 44, 91, 27}, Nedelja.sortedZeros(new int[]{35, 68, 44, 91, 27}));
assertEquals(new int[]{80, 56, 29, 28, 71, 2, 41, 62, 11, 79, 1, 63, 76, 5, 18, 24, 61, 0}, Nedelja.sortedZeros(new int[]{80, 56, 29, 28, 71, 2, 41, 62, 11, 79, 1, 63, 76, 5, 18, 24, 61, 0}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{46, 14, 30, 52, 30, 13, 87, 49, 76, 69, 92, 96}, Nedelja.sortedZeros(new int[]{46, 14, 30, 52, 30, 13, 87, 49, 76, 69, 92, 96}));
assertEquals(new int[]{2, 84, 62, 17, 90, 67, 56, 16, 28, 15}, Nedelja.sortedZeros(new int[]{2, 84, 62, 17, 90, 67, 56, 16, 28, 15}));
assertEquals(new int[]{42, 17, 63, 12}, Nedelja.sortedZeros(new int[]{42, 17, 63, 12}));
assertEquals(new int[]{7, 6, 19, 6, 66, 78, 2, 13, 37, 61, 82, 30, 69, 64, 51, 14}, Nedelja.sortedZeros(new int[]{7, 6, 19, 6, 66, 78, 2, 13, 37, 61, 82, 30, 69, 64, 51, 14}));
assertEquals(new int[]{65, 90, 35, 73, 13, 7, 9, 27}, Nedelja.sortedZeros(new int[]{65, 90, 35, 73, 13, 7, 9, 27}));
assertEquals(new int[]{36, 25, 13, 87, 45, 54, 85, 92, 93, 78, 94}, Nedelja.sortedZeros(new int[]{36, 25, 13, 87, 45, 54, 85, 92, 93, 78, 94}));
assertEquals(new int[]{21, 60, 66, 44, 96, 38, 68, 12, 6, 0}, Nedelja.sortedZeros(new int[]{21, 60, 66, 44, 0, 96, 38, 68, 12, 6}));
assertEquals(new int[]{83, 76, 34, 90}, Nedelja.sortedZeros(new int[]{83, 76, 34, 90}));
assertEquals(new int[]{62, 51, 96, 83, 44, 93, 76, 64, 11, 60, 95, 38, 17, 62, 69}, Nedelja.sortedZeros(new int[]{62, 51, 96, 83, 44, 93, 76, 64, 11, 60, 95, 38, 17, 62, 69}));
assertEquals(new int[]{97, 31, 77, 31, 66, 35, 86, 47, 78, 45, 54, 96, 35, 25, 22, 0}, Nedelja.sortedZeros(new int[]{97, 31, 77, 31, 66, 35, 0, 86, 47, 78, 45, 54, 96, 35, 25, 22}));
assertEquals(new int[]{81, 24, 81, 71, 40, 29, 22, 51, 61, 39, 92, 60, 23, 33, 37, 49, 85, 45, 0}, Nedelja.sortedZeros(new int[]{81, 24, 81, 71, 40, 29, 22, 0, 51, 61, 39, 92, 60, 23, 33, 37, 49, 85, 45}));
assertEquals(new int[]{47, 89, 9, 11, 45, 76, 59, 9, 49, 77, 94, 31, 16, 19, 62, 75, 81, 8, 0}, Nedelja.sortedZeros(new int[]{47, 89, 9, 11, 45, 0, 76, 59, 9, 49, 77, 94, 31, 16, 19, 62, 75, 81, 8}));
assertEquals(new int[]{8, 27, 27, 23, 5, 37, 60, 14, 88, 15, 76, 8, 14, 49, 73, 0, 0}, Nedelja.sortedZeros(new int[]{8, 27, 0, 27, 23, 5, 37, 60, 14, 0, 88, 15, 76, 8, 14, 49, 73}));
assertEquals(new int[]{37, 70, 27, 82, 76}, Nedelja.sortedZeros(new int[]{37, 70, 27, 82, 76}));
assertEquals(new int[]{59, 59, 4, 46, 32, 3, 77, 36, 27, 29, 50, 10}, Nedelja.sortedZeros(new int[]{59, 59, 4, 46, 32, 3, 77, 36, 27, 29, 50, 10}));
assertEquals(new int[]{59, 19}, Nedelja.sortedZeros(new int[]{59, 19}));
assertEquals(new int[]{55, 12}, Nedelja.sortedZeros(new int[]{55, 12}));
assertEquals(new int[]{1, 34, 18}, Nedelja.sortedZeros(new int[]{1, 34, 18}));
assertEquals(new int[]{18, 73, 7, 43, 94, 43, 91, 9, 47, 6, 22, 65}, Nedelja.sortedZeros(new int[]{18, 73, 7, 43, 94, 43, 91, 9, 47, 6, 22, 65}));
assertEquals(new int[]{13, 22, 6}, Nedelja.sortedZeros(new int[]{13, 22, 6}));
assertEquals(new int[]{44, 96, 84, 91, 6, 26, 81, 10, 98, 96, 33}, Nedelja.sortedZeros(new int[]{44, 96, 84, 91, 6, 26, 81, 10, 98, 96, 33}));
assertEquals(new int[]{51}, Nedelja.sortedZeros(new int[]{51}));
assertEquals(new int[]{29, 34, 34, 76, 73, 71, 5, 2, 13}, Nedelja.sortedZeros(new int[]{29, 34, 34, 76, 73, 71, 5, 2, 13}));
assertEquals(new int[]{85}, Nedelja.sortedZeros(new int[]{85}));
assertEquals(new int[]{64, 44, 43, 48, 33, 53, 67, 78, 35, 3, 1, 77, 94, 13}, Nedelja.sortedZeros(new int[]{64, 44, 43, 48, 33, 53, 67, 78, 35, 3, 1, 77, 94, 13}));
assertEquals(new int[]{46, 22, 80, 47, 21, 56, 52, 78, 60, 60, 35, 79, 43}, Nedelja.sortedZeros(new int[]{46, 22, 80, 47, 21, 56, 52, 78, 60, 60, 35, 79, 43}));
assertEquals(new int[]{72, 85, 14, 38, 66, 19, 21, 99, 46, 96, 62, 95, 72, 0}, Nedelja.sortedZeros(new int[]{72, 85, 14, 38, 0, 66, 19, 21, 99, 46, 96, 62, 95, 72}));
assertEquals(new int[]{16, 13, 3, 28, 86, 91, 37, 33, 27, 60, 32, 41}, Nedelja.sortedZeros(new int[]{16, 13, 3, 28, 86, 91, 37, 33, 27, 60, 32, 41}));
assertEquals(new int[]{70, 11, 9, 55, 73, 12, 72, 50, 29, 50, 74, 48, 76, 65, 15, 67, 5, 32}, Nedelja.sortedZeros(new int[]{70, 11, 9, 55, 73, 12, 72, 50, 29, 50, 74, 48, 76, 65, 15, 67, 5, 32}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{52, 14, 67, 23, 19, 56, 18, 68}, Nedelja.sortedZeros(new int[]{52, 14, 67, 23, 19, 56, 18, 68}));
assertEquals(new int[]{38}, Nedelja.sortedZeros(new int[]{38}));
assertEquals(new int[]{49, 86, 6, 57, 73, 53, 40, 76, 86}, Nedelja.sortedZeros(new int[]{49, 86, 6, 57, 73, 53, 40, 76, 86}));
assertEquals(new int[]{28, 51, 20, 89}, Nedelja.sortedZeros(new int[]{28, 51, 20, 89}));
assertEquals(new int[]{51, 42, 43, 30, 63, 65, 65, 41, 52, 29}, Nedelja.sortedZeros(new int[]{51, 42, 43, 30, 63, 65, 65, 41, 52, 29}));
assertEquals(new int[]{2, 72, 73, 49, 76, 61, 49, 25, 35}, Nedelja.sortedZeros(new int[]{2, 72, 73, 49, 76, 61, 49, 25, 35}));
assertEquals(new int[]{61, 31, 5}, Nedelja.sortedZeros(new int[]{61, 31, 5}));
assertEquals(new int[]{56, 31, 63, 9, 11, 39, 31, 91, 31, 10, 66, 24, 90, 52, 62, 68}, Nedelja.sortedZeros(new int[]{56, 31, 63, 9, 11, 39, 31, 91, 31, 10, 66, 24, 90, 52, 62, 68}));
assertEquals(new int[]{78, 20, 81}, Nedelja.sortedZeros(new int[]{78, 20, 81}));
assertEquals(new int[]{28, 20, 62, 34, 82, 66, 44, 87, 84, 8, 15, 39}, Nedelja.sortedZeros(new int[]{28, 20, 62, 34, 82, 66, 44, 87, 84, 8, 15, 39}));
assertEquals(new int[]{30, 78, 28, 7, 72, 47, 24, 37, 39, 3, 34, 67, 11, 51, 71, 84, 98, 86, 52}, Nedelja.sortedZeros(new int[]{30, 78, 28, 7, 72, 47, 24, 37, 39, 3, 34, 67, 11, 51, 71, 84, 98, 86, 52}));
assertEquals(new int[]{17, 88, 74, 63, 20, 67, 81, 48, 50, 47, 36, 15}, Nedelja.sortedZeros(new int[]{17, 88, 74, 63, 20, 67, 81, 48, 50, 47, 36, 15}));
assertEquals(new int[]{30, 96, 63, 95, 30, 75}, Nedelja.sortedZeros(new int[]{30, 96, 63, 95, 30, 75}));
assertEquals(new int[]{14, 48, 81, 36, 24, 77, 7, 78, 90}, Nedelja.sortedZeros(new int[]{14, 48, 81, 36, 24, 77, 7, 78, 90}));
assertEquals(new int[]{57, 89, 86, 24, 94, 61, 52, 99, 1, 51, 96, 81, 63}, Nedelja.sortedZeros(new int[]{57, 89, 86, 24, 94, 61, 52, 99, 1, 51, 96, 81, 63}));
assertEquals(new int[]{44, 77}, Nedelja.sortedZeros(new int[]{44, 77}));
assertEquals(new int[]{8, 79, 53, 46, 56, 14, 36, 54, 3, 12, 60, 89, 7, 71, 44, 22}, Nedelja.sortedZeros(new int[]{8, 79, 53, 46, 56, 14, 36, 54, 3, 12, 60, 89, 7, 71, 44, 22}));
assertEquals(new int[]{52, 18, 30, 57, 61, 41, 7, 69, 52, 77, 56, 67, 58, 94, 14, 30, 5}, Nedelja.sortedZeros(new int[]{52, 18, 30, 57, 61, 41, 7, 69, 52, 77, 56, 67, 58, 94, 14, 30, 5}));
assertEquals(new int[]{70, 68, 43, 3, 6, 96, 57, 92, 39, 76, 9}, Nedelja.sortedZeros(new int[]{70, 68, 43, 3, 6, 96, 57, 92, 39, 76, 9}));
assertEquals(new int[]{67, 74, 94, 14, 12, 49}, Nedelja.sortedZeros(new int[]{67, 74, 94, 14, 12, 49}));
assertEquals(new int[]{30, 75, 6}, Nedelja.sortedZeros(new int[]{30, 75, 6}));
assertEquals(new int[]{98, 12, 24, 88, 66, 76, 98, 21, 55, 45, 33, 25, 3, 42, 21, 37}, Nedelja.sortedZeros(new int[]{98, 12, 24, 88, 66, 76, 98, 21, 55, 45, 33, 25, 3, 42, 21, 37}));
assertEquals(new int[]{91, 96, 63, 85, 70, 96, 26, 21, 64, 3, 13, 3, 27, 98, 40, 71, 47, 69, 75}, Nedelja.sortedZeros(new int[]{91, 96, 63, 85, 70, 96, 26, 21, 64, 3, 13, 3, 27, 98, 40, 71, 47, 69, 75}));
assertEquals(new int[]{67, 65, 34, 23, 54, 6, 78, 79, 66, 79, 68, 7}, Nedelja.sortedZeros(new int[]{67, 65, 34, 23, 54, 6, 78, 79, 66, 79, 68, 7}));
assertEquals(new int[]{48, 15, 85, 63, 51, 2, 98, 35, 33, 64, 87, 91, 47}, Nedelja.sortedZeros(new int[]{48, 15, 85, 63, 51, 2, 98, 35, 33, 64, 87, 91, 47}));
assertEquals(new int[]{93, 83, 8, 26}, Nedelja.sortedZeros(new int[]{93, 83, 8, 26}));
assertEquals(new int[]{32, 13, 24, 84, 5, 34}, Nedelja.sortedZeros(new int[]{32, 13, 24, 84, 5, 34}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{49, 9, 81, 83, 64, 87, 12, 54, 63, 44, 37, 67, 56, 99}, Nedelja.sortedZeros(new int[]{49, 9, 81, 83, 64, 87, 12, 54, 63, 44, 37, 67, 56, 99}));
assertEquals(new int[]{20, 81, 73, 68, 41, 58, 75, 75, 25, 98, 11, 84, 43, 95, 74, 9, 51, 27}, Nedelja.sortedZeros(new int[]{20, 81, 73, 68, 41, 58, 75, 75, 25, 98, 11, 84, 43, 95, 74, 9, 51, 27}));
assertEquals(new int[]{16, 35, 96, 59, 48, 89, 21, 54, 71, 54, 20}, Nedelja.sortedZeros(new int[]{16, 35, 96, 59, 48, 89, 21, 54, 71, 54, 20}));
assertEquals(new int[]{71, 88, 7, 97, 50, 23, 66, 65}, Nedelja.sortedZeros(new int[]{71, 88, 7, 97, 50, 23, 66, 65}));
assertEquals(new int[]{53, 36, 89, 38, 10, 33, 46, 62, 17, 72, 45, 85, 27, 0}, Nedelja.sortedZeros(new int[]{53, 36, 0, 89, 38, 10, 33, 46, 62, 17, 72, 45, 85, 27}));
assertEquals(new int[]{59, 23, 38, 36, 52, 81, 23, 78, 0}, Nedelja.sortedZeros(new int[]{59, 23, 0, 38, 36, 52, 81, 23, 78}));
assertEquals(new int[]{7, 44, 23, 45, 11, 93, 97, 44, 51, 9, 85, 13, 36, 32, 87, 11, 70, 15}, Nedelja.sortedZeros(new int[]{7, 44, 23, 45, 11, 93, 97, 44, 51, 9, 85, 13, 36, 32, 87, 11, 70, 15}));
assertEquals(new int[]{45, 50, 49}, Nedelja.sortedZeros(new int[]{45, 50, 49}));
assertEquals(new int[]{6, 77, 56, 68, 6, 92, 19, 76, 47, 9}, Nedelja.sortedZeros(new int[]{6, 77, 56, 68, 6, 92, 19, 76, 47, 9}));
assertEquals(new int[]{78, 4, 81, 95, 48, 97, 90, 3, 18, 3, 95, 12, 68, 31, 0}, Nedelja.sortedZeros(new int[]{78, 4, 0, 81, 95, 48, 97, 90, 3, 18, 3, 95, 12, 68, 31}));
assertEquals(new int[]{37, 29}, Nedelja.sortedZeros(new int[]{37, 29}));
assertEquals(new int[]{60, 48, 21, 69, 17, 31, 31, 53, 10, 18, 85, 5, 55, 24, 13, 51, 61}, Nedelja.sortedZeros(new int[]{60, 48, 21, 69, 17, 31, 31, 53, 10, 18, 85, 5, 55, 24, 13, 51, 61}));
assertEquals(new int[]{62, 16, 79, 2, 41, 52, 68, 33}, Nedelja.sortedZeros(new int[]{62, 16, 79, 2, 41, 52, 68, 33}));
assertEquals(new int[]{44, 19, 48, 83, 10, 7, 71, 16, 83, 55, 70, 46, 95, 14, 84, 7, 67, 99, 5}, Nedelja.sortedZeros(new int[]{44, 19, 48, 83, 10, 7, 71, 16, 83, 55, 70, 46, 95, 14, 84, 7, 67, 99, 5}));
assertEquals(new int[]{27, 15, 21, 76, 1, 82, 35}, Nedelja.sortedZeros(new int[]{27, 15, 21, 76, 1, 82, 35}));
assertEquals(new int[]{30, 52, 33, 97, 69, 10, 72, 39, 91, 90}, Nedelja.sortedZeros(new int[]{30, 52, 33, 97, 69, 10, 72, 39, 91, 90}));
assertEquals(new int[]{66, 95, 28, 93, 42, 84}, Nedelja.sortedZeros(new int[]{66, 95, 28, 93, 42, 84}));
assertEquals(new int[]{30, 47, 77, 16, 27, 76}, Nedelja.sortedZeros(new int[]{30, 47, 77, 16, 27, 76}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{57, 44, 88, 90, 37}, Nedelja.sortedZeros(new int[]{57, 44, 88, 90, 37}));
assertEquals(new int[]{3, 75, 39, 8, 23, 1, 43, 2, 74, 50, 67, 54, 53, 44, 67, 66}, Nedelja.sortedZeros(new int[]{3, 75, 39, 8, 23, 1, 43, 2, 74, 50, 67, 54, 53, 44, 67, 66}));
assertEquals(new int[]{43, 75, 61, 86, 20, 20, 42, 40, 70}, Nedelja.sortedZeros(new int[]{43, 75, 61, 86, 20, 20, 42, 40, 70}));
assertEquals(new int[]{84, 65, 15, 44, 21, 2}, Nedelja.sortedZeros(new int[]{84, 65, 15, 44, 21, 2}));
assertEquals(new int[]{13, 89, 59, 92, 84, 56, 76, 72, 76, 87, 99, 7, 55, 37, 36}, Nedelja.sortedZeros(new int[]{13, 89, 59, 92, 84, 56, 76, 72, 76, 87, 99, 7, 55, 37, 36}));
assertEquals(new int[]{5, 47, 93, 86, 25, 94, 17, 20, 65, 18, 48, 31, 52, 86, 31, 0}, Nedelja.sortedZeros(new int[]{5, 47, 93, 86, 25, 94, 17, 20, 65, 0, 18, 48, 31, 52, 86, 31}));
assertEquals(new int[]{58, 53, 34, 4, 93, 9, 1, 8, 28, 24, 94, 63, 84, 93}, Nedelja.sortedZeros(new int[]{58, 53, 34, 4, 93, 9, 1, 8, 28, 24, 94, 63, 84, 93}));
assertEquals(new int[]{4, 85, 58, 39, 74, 43, 79, 82, 29, 88, 51, 80, 93, 41, 73, 0}, Nedelja.sortedZeros(new int[]{4, 85, 58, 39, 0, 74, 43, 79, 82, 29, 88, 51, 80, 93, 41, 73}));
assertEquals(new int[]{47, 32, 22, 20, 75, 27}, Nedelja.sortedZeros(new int[]{47, 32, 22, 20, 75, 27}));
assertEquals(new int[]{55, 57, 44, 54, 20, 8, 70, 30, 11, 2, 34, 50, 56, 82, 36, 41, 45}, Nedelja.sortedZeros(new int[]{55, 57, 44, 54, 20, 8, 70, 30, 11, 2, 34, 50, 56, 82, 36, 41, 45}));
assertEquals(new int[]{66, 65}, Nedelja.sortedZeros(new int[]{66, 65}));
assertEquals(new int[]{75, 89, 76, 75, 77, 11, 12, 2, 10, 4, 67, 79, 56}, Nedelja.sortedZeros(new int[]{75, 89, 76, 75, 77, 11, 12, 2, 10, 4, 67, 79, 56}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{82, 72, 51, 33, 2, 66}, Nedelja.sortedZeros(new int[]{82, 72, 51, 33, 2, 66}));
assertEquals(new int[]{72, 16, 66, 98}, Nedelja.sortedZeros(new int[]{72, 16, 66, 98}));
assertEquals(new int[]{81, 4, 4, 51, 86, 46, 38, 36, 48, 67, 72, 68, 48, 66, 27}, Nedelja.sortedZeros(new int[]{81, 4, 4, 51, 86, 46, 38, 36, 48, 67, 72, 68, 48, 66, 27}));
assertEquals(new int[]{63, 19, 96, 14, 58, 15, 7, 30}, Nedelja.sortedZeros(new int[]{63, 19, 96, 14, 58, 15, 7, 30}));
assertEquals(new int[]{50, 95, 2, 43, 34, 30, 46, 74, 54, 45, 77, 94, 44, 89, 74, 57, 53, 26, 0}, Nedelja.sortedZeros(new int[]{0, 50, 95, 2, 43, 34, 30, 46, 74, 54, 45, 77, 94, 44, 89, 74, 57, 53, 26}));
assertEquals(new int[]{98, 25, 19, 84, 89, 24, 13, 68, 88, 78, 13, 84, 27, 24, 0}, Nedelja.sortedZeros(new int[]{98, 25, 19, 84, 89, 24, 13, 68, 88, 78, 13, 84, 27, 0, 24}));
assertEquals(new int[]{46, 82, 74, 14, 72, 35, 53, 5}, Nedelja.sortedZeros(new int[]{46, 82, 74, 14, 72, 35, 53, 5}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{47}, Nedelja.sortedZeros(new int[]{47}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{72, 89, 59, 7, 12, 40, 14, 15, 70, 54, 15, 17, 74}, Nedelja.sortedZeros(new int[]{72, 89, 59, 7, 12, 40, 14, 15, 70, 54, 15, 17, 74}));
assertEquals(new int[]{90, 32, 15, 90, 96, 91, 78, 49, 88, 95, 20, 56, 39, 10, 79, 68}, Nedelja.sortedZeros(new int[]{90, 32, 15, 90, 96, 91, 78, 49, 88, 95, 20, 56, 39, 10, 79, 68}));
assertEquals(new int[]{69, 71, 44, 49, 23, 66, 66, 47, 40, 10, 92, 97, 11, 22, 0}, Nedelja.sortedZeros(new int[]{69, 71, 44, 49, 23, 66, 66, 47, 40, 0, 10, 92, 97, 11, 22}));
assertEquals(new int[]{58, 76, 73, 39, 71, 39, 54, 37, 87}, Nedelja.sortedZeros(new int[]{58, 76, 73, 39, 71, 39, 54, 37, 87}));
assertEquals(new int[]{51, 79, 41, 25, 41, 22, 5, 87, 7}, Nedelja.sortedZeros(new int[]{51, 79, 41, 25, 41, 22, 5, 87, 7}));
assertEquals(new int[]{10, 22, 66, 46, 11, 89, 41, 11, 98, 60, 8, 11, 18, 75}, Nedelja.sortedZeros(new int[]{10, 22, 66, 46, 11, 89, 41, 11, 98, 60, 8, 11, 18, 75}));
assertEquals(new int[]{21, 81, 76, 57, 63, 55, 71, 12, 85, 3, 73, 7, 76}, Nedelja.sortedZeros(new int[]{21, 81, 76, 57, 63, 55, 71, 12, 85, 3, 73, 7, 76}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{88, 8, 99, 1, 38, 20, 13, 75, 80}, Nedelja.sortedZeros(new int[]{88, 8, 99, 1, 38, 20, 13, 75, 80}));
assertEquals(new int[]{8, 30, 29, 81, 42, 27, 46, 88, 54, 31}, Nedelja.sortedZeros(new int[]{8, 30, 29, 81, 42, 27, 46, 88, 54, 31}));
assertEquals(new int[]{82, 27, 5, 74, 54}, Nedelja.sortedZeros(new int[]{82, 27, 5, 74, 54}));
assertEquals(new int[]{11, 91, 21, 27, 84, 89, 29, 48, 55, 62}, Nedelja.sortedZeros(new int[]{11, 91, 21, 27, 84, 89, 29, 48, 55, 62}));
assertEquals(new int[]{31, 32, 21, 48}, Nedelja.sortedZeros(new int[]{31, 32, 21, 48}));
assertEquals(new int[]{70, 41, 65, 38, 3, 89, 15, 38, 34, 95, 42, 15, 33, 49, 2, 65, 7, 75}, Nedelja.sortedZeros(new int[]{70, 41, 65, 38, 3, 89, 15, 38, 34, 95, 42, 15, 33, 49, 2, 65, 7, 75}));
assertEquals(new int[]{78, 96, 14, 30, 17, 42, 61, 79, 33, 78, 50, 80}, Nedelja.sortedZeros(new int[]{78, 96, 14, 30, 17, 42, 61, 79, 33, 78, 50, 80}));
assertEquals(new int[]{2, 46, 59, 86, 85, 94, 65, 88, 95, 28, 58, 21, 12, 60, 85, 41, 52, 82}, Nedelja.sortedZeros(new int[]{2, 46, 59, 86, 85, 94, 65, 88, 95, 28, 58, 21, 12, 60, 85, 41, 52, 82}));
assertEquals(new int[]{75}, Nedelja.sortedZeros(new int[]{75}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{12, 85, 22, 7}, Nedelja.sortedZeros(new int[]{12, 85, 22, 7}));
assertEquals(new int[]{80, 92, 94, 10, 22, 74, 93}, Nedelja.sortedZeros(new int[]{80, 92, 94, 10, 22, 74, 93}));
assertEquals(new int[]{56, 54, 43, 75, 86, 9, 54, 76, 53, 12}, Nedelja.sortedZeros(new int[]{56, 54, 43, 75, 86, 9, 54, 76, 53, 12}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{27, 21, 94, 6, 95, 38, 86}, Nedelja.sortedZeros(new int[]{27, 21, 94, 6, 95, 38, 86}));
assertEquals(new int[]{72, 85, 35, 33, 67, 77, 92, 36, 21, 42, 7, 53, 47, 92}, Nedelja.sortedZeros(new int[]{72, 85, 35, 33, 67, 77, 92, 36, 21, 42, 7, 53, 47, 92}));
assertEquals(new int[]{62, 82, 95, 80, 59, 78, 81, 38, 34, 68, 72, 91, 79, 25, 92}, Nedelja.sortedZeros(new int[]{62, 82, 95, 80, 59, 78, 81, 38, 34, 68, 72, 91, 79, 25, 92}));
assertEquals(new int[]{35, 4, 97, 93, 11, 75, 25, 97, 66, 12, 68, 40, 60, 53, 17, 7, 59, 71}, Nedelja.sortedZeros(new int[]{35, 4, 97, 93, 11, 75, 25, 97, 66, 12, 68, 40, 60, 53, 17, 7, 59, 71}));
assertEquals(new int[]{61, 89, 36, 93, 94, 85, 60, 16, 89, 43, 0}, Nedelja.sortedZeros(new int[]{61, 0, 89, 36, 93, 94, 85, 60, 16, 89, 43}));
assertEquals(new int[]{59, 84, 91, 71, 13, 27}, Nedelja.sortedZeros(new int[]{59, 84, 91, 71, 13, 27}));
assertEquals(new int[]{30, 99, 24, 87, 60, 48, 30, 59, 46, 37, 79, 81}, Nedelja.sortedZeros(new int[]{30, 99, 24, 87, 60, 48, 30, 59, 46, 37, 79, 81}));
assertEquals(new int[]{80, 61, 11, 76, 7, 79, 74, 81, 64, 37, 16, 89, 70, 50}, Nedelja.sortedZeros(new int[]{80, 61, 11, 76, 7, 79, 74, 81, 64, 37, 16, 89, 70, 50}));
assertEquals(new int[]{72, 6, 11, 70, 6, 77, 75}, Nedelja.sortedZeros(new int[]{72, 6, 11, 70, 6, 77, 75}));
assertEquals(new int[]{18, 95, 88, 51, 68}, Nedelja.sortedZeros(new int[]{18, 95, 88, 51, 68}));
assertEquals(new int[]{90, 96, 94, 56, 34}, Nedelja.sortedZeros(new int[]{90, 96, 94, 56, 34}));
assertEquals(new int[]{19, 91, 47}, Nedelja.sortedZeros(new int[]{19, 91, 47}));
assertEquals(new int[]{37, 1, 82, 37, 42, 54}, Nedelja.sortedZeros(new int[]{37, 1, 82, 37, 42, 54}));
assertEquals(new int[]{63, 33, 82, 39, 64, 41, 70, 84, 35, 19, 80, 60, 64, 62, 76, 35, 99, 79, 0}, Nedelja.sortedZeros(new int[]{63, 33, 82, 39, 64, 41, 70, 84, 35, 19, 80, 60, 64, 62, 76, 35, 99, 0, 79}));
assertEquals(new int[]{72, 70, 10, 13, 9}, Nedelja.sortedZeros(new int[]{72, 70, 10, 13, 9}));
assertEquals(new int[]{98, 81, 72, 48, 73}, Nedelja.sortedZeros(new int[]{98, 81, 72, 48, 73}));
assertEquals(new int[]{82, 10, 34, 88, 78, 76, 88, 20, 0, 0}, Nedelja.sortedZeros(new int[]{82, 10, 0, 34, 88, 78, 76, 88, 0, 20}));
assertEquals(new int[]{28, 44, 23, 12, 58, 44, 43, 67, 88, 21, 7, 4, 37, 82, 75, 99, 62, 45}, Nedelja.sortedZeros(new int[]{28, 44, 23, 12, 58, 44, 43, 67, 88, 21, 7, 4, 37, 82, 75, 99, 62, 45}));
assertEquals(new int[]{37, 45, 64, 51, 35, 91, 54, 11, 80, 3, 89, 86, 75, 12, 40, 21}, Nedelja.sortedZeros(new int[]{37, 45, 64, 51, 35, 91, 54, 11, 80, 3, 89, 86, 75, 12, 40, 21}));
assertEquals(new int[]{67, 47, 41, 53, 20, 72, 97}, Nedelja.sortedZeros(new int[]{67, 47, 41, 53, 20, 72, 97}));
assertEquals(new int[]{47, 59, 55}, Nedelja.sortedZeros(new int[]{47, 59, 55}));
assertEquals(new int[]{15, 37}, Nedelja.sortedZeros(new int[]{15, 37}));
assertEquals(new int[]{56}, Nedelja.sortedZeros(new int[]{56}));
assertEquals(new int[]{52, 98, 78, 24, 48, 13, 51, 56, 49, 52, 78, 22, 89, 84, 22, 0}, Nedelja.sortedZeros(new int[]{52, 98, 78, 24, 48, 13, 0, 51, 56, 49, 52, 78, 22, 89, 84, 22}));
assertEquals(new int[]{89}, Nedelja.sortedZeros(new int[]{89}));
assertEquals(new int[]{65, 25, 34, 56, 74, 1, 71, 22, 11, 18, 72, 98, 49, 90, 7, 53, 47}, Nedelja.sortedZeros(new int[]{65, 25, 34, 56, 74, 1, 71, 22, 11, 18, 72, 98, 49, 90, 7, 53, 47}));
assertEquals(new int[]{90, 63, 13, 82, 83, 35, 66, 24, 24, 83, 36, 59, 93, 86}, Nedelja.sortedZeros(new int[]{90, 63, 13, 82, 83, 35, 66, 24, 24, 83, 36, 59, 93, 86}));
assertEquals(new int[]{18, 3, 93, 18, 76, 46, 32, 49, 98, 33, 88, 26, 83, 69, 67, 0}, Nedelja.sortedZeros(new int[]{18, 3, 93, 18, 76, 46, 32, 49, 98, 33, 88, 26, 83, 0, 69, 67}));
assertEquals(new int[]{56, 5, 9, 41, 14, 83, 47, 6, 23, 81, 18, 23, 33, 66, 65, 1, 73, 60}, Nedelja.sortedZeros(new int[]{56, 5, 9, 41, 14, 83, 47, 6, 23, 81, 18, 23, 33, 66, 65, 1, 73, 60}));
assertEquals(new int[]{33, 40, 27, 19, 12, 95, 26, 37}, Nedelja.sortedZeros(new int[]{33, 40, 27, 19, 12, 95, 26, 37}));
assertEquals(new int[]{35, 85, 17, 37, 35, 91, 97, 84, 44, 79, 7, 48, 43, 66, 26}, Nedelja.sortedZeros(new int[]{35, 85, 17, 37, 35, 91, 97, 84, 44, 79, 7, 48, 43, 66, 26}));
assertEquals(new int[]{47, 49, 69, 33}, Nedelja.sortedZeros(new int[]{47, 49, 69, 33}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{87, 4, 88, 65, 4, 16, 85, 27, 22, 73, 9, 9, 99, 8, 85, 71, 7, 54}, Nedelja.sortedZeros(new int[]{87, 4, 88, 65, 4, 16, 85, 27, 22, 73, 9, 9, 99, 8, 85, 71, 7, 54}));
assertEquals(new int[]{34, 51}, Nedelja.sortedZeros(new int[]{34, 51}));
assertEquals(new int[]{79, 24, 56, 84, 44, 62, 85, 6, 92, 98, 7, 30, 74}, Nedelja.sortedZeros(new int[]{79, 24, 56, 84, 44, 62, 85, 6, 92, 98, 7, 30, 74}));
assertEquals(new int[]{90, 24, 46, 92, 35, 44, 77, 20, 63, 99, 56, 48, 89, 26, 66, 13, 36, 62}, Nedelja.sortedZeros(new int[]{90, 24, 46, 92, 35, 44, 77, 20, 63, 99, 56, 48, 89, 26, 66, 13, 36, 62}));
assertEquals(new int[]{18, 50, 99, 39, 73, 23, 90, 32, 28, 43, 10, 17, 80, 16, 53}, Nedelja.sortedZeros(new int[]{18, 50, 99, 39, 73, 23, 90, 32, 28, 43, 10, 17, 80, 16, 53}));
assertEquals(new int[]{64, 7, 4, 13, 6, 73, 59, 81, 96, 69, 0}, Nedelja.sortedZeros(new int[]{0, 64, 7, 4, 13, 6, 73, 59, 81, 96, 69}));
assertEquals(new int[]{89, 24, 67, 65, 97, 29, 83, 13, 48, 25, 8, 6, 2, 9, 79}, Nedelja.sortedZeros(new int[]{89, 24, 67, 65, 97, 29, 83, 13, 48, 25, 8, 6, 2, 9, 79}));
assertEquals(new int[]{94, 41, 13, 84, 24, 79, 99, 35, 71, 97, 40, 76, 10, 82, 35, 61, 16, 68}, Nedelja.sortedZeros(new int[]{94, 41, 13, 84, 24, 79, 99, 35, 71, 97, 40, 76, 10, 82, 35, 61, 16, 68}));
assertEquals(new int[]{7, 22, 54, 69, 2, 34, 35, 98, 42, 9, 9, 0}, Nedelja.sortedZeros(new int[]{7, 22, 54, 69, 2, 34, 0, 35, 98, 42, 9, 9}));
assertEquals(new int[]{82, 36, 39, 78, 2, 84, 97, 60, 29, 67, 76, 1, 35, 0}, Nedelja.sortedZeros(new int[]{82, 36, 0, 39, 78, 2, 84, 97, 60, 29, 67, 76, 1, 35}));
assertEquals(new int[]{39, 38, 15, 71, 93, 26, 10, 35, 5, 71, 90, 16, 30, 29}, Nedelja.sortedZeros(new int[]{39, 38, 15, 71, 93, 26, 10, 35, 5, 71, 90, 16, 30, 29}));
assertEquals(new int[]{32, 98, 88, 7, 34, 88, 84, 10, 87, 21, 51, 90, 17, 79, 26}, Nedelja.sortedZeros(new int[]{32, 98, 88, 7, 34, 88, 84, 10, 87, 21, 51, 90, 17, 79, 26}));
assertEquals(new int[]{57, 13, 11, 39, 19}, Nedelja.sortedZeros(new int[]{57, 13, 11, 39, 19}));
assertEquals(new int[]{90, 17, 42, 22, 23, 57, 20, 33}, Nedelja.sortedZeros(new int[]{90, 17, 42, 22, 23, 57, 20, 33}));
assertEquals(new int[]{40, 94, 59, 95, 35, 6, 63, 61, 47, 49, 91, 67, 67, 6, 23, 55, 94, 74, 74}, Nedelja.sortedZeros(new int[]{40, 94, 59, 95, 35, 6, 63, 61, 47, 49, 91, 67, 67, 6, 23, 55, 94, 74, 74}));
assertEquals(new int[]{95, 87, 35, 53, 61, 6, 14, 39, 94, 7, 30}, Nedelja.sortedZeros(new int[]{95, 87, 35, 53, 61, 6, 14, 39, 94, 7, 30}));
assertEquals(new int[]{20, 30, 24, 86, 46, 62, 10}, Nedelja.sortedZeros(new int[]{20, 30, 24, 86, 46, 62, 10}));
assertEquals(new int[]{83, 10, 17, 51, 69, 89, 68, 90, 37, 86}, Nedelja.sortedZeros(new int[]{83, 10, 17, 51, 69, 89, 68, 90, 37, 86}));
assertEquals(new int[]{48, 4, 11, 77, 42}, Nedelja.sortedZeros(new int[]{48, 4, 11, 77, 42}));
assertEquals(new int[]{94, 88, 33, 64, 30, 53, 47, 33, 64, 81, 38}, Nedelja.sortedZeros(new int[]{94, 88, 33, 64, 30, 53, 47, 33, 64, 81, 38}));
assertEquals(new int[]{4}, Nedelja.sortedZeros(new int[]{4}));
assertEquals(new int[]{49, 74, 17, 33, 66, 79, 70, 28, 5, 54, 58, 55}, Nedelja.sortedZeros(new int[]{49, 74, 17, 33, 66, 79, 70, 28, 5, 54, 58, 55}));
assertEquals(new int[]{56, 92, 76, 22, 31, 40, 13, 97, 62, 54, 81, 75, 44, 35, 95, 32, 38, 22}, Nedelja.sortedZeros(new int[]{56, 92, 76, 22, 31, 40, 13, 97, 62, 54, 81, 75, 44, 35, 95, 32, 38, 22}));
assertEquals(new int[]{89, 68, 54, 22, 16}, Nedelja.sortedZeros(new int[]{89, 68, 54, 22, 16}));
assertEquals(new int[]{40, 13, 25, 91, 93}, Nedelja.sortedZeros(new int[]{40, 13, 25, 91, 93}));
assertEquals(new int[]{79, 45, 44, 50, 85, 32, 94, 48, 30, 2, 8, 4, 20, 24, 51, 14, 0}, Nedelja.sortedZeros(new int[]{79, 45, 44, 50, 85, 32, 94, 48, 30, 2, 8, 4, 20, 24, 51, 14, 0}));
assertEquals(new int[]{44, 16, 23, 23, 3, 63, 88, 88, 32, 17, 27, 18, 95}, Nedelja.sortedZeros(new int[]{44, 16, 23, 23, 3, 63, 88, 88, 32, 17, 27, 18, 95}));
assertEquals(new int[]{23}, Nedelja.sortedZeros(new int[]{23}));
assertEquals(new int[]{56, 64, 49, 64}, Nedelja.sortedZeros(new int[]{56, 64, 49, 64}));
assertEquals(new int[]{10, 3, 33, 53, 14, 40, 45, 58, 75, 83, 94, 17, 89, 42, 53, 21, 8}, Nedelja.sortedZeros(new int[]{10, 3, 33, 53, 14, 40, 45, 58, 75, 83, 94, 17, 89, 42, 53, 21, 8}));
assertEquals(new int[]{17, 12, 8, 59, 37}, Nedelja.sortedZeros(new int[]{17, 12, 8, 59, 37}));
assertEquals(new int[]{98, 41, 72, 86, 85, 92, 45, 32, 57, 35, 71}, Nedelja.sortedZeros(new int[]{98, 41, 72, 86, 85, 92, 45, 32, 57, 35, 71}));
assertEquals(new int[]{17, 89, 94, 49, 51, 25, 74, 13, 18, 23, 5, 51, 73, 35, 86, 85, 64}, Nedelja.sortedZeros(new int[]{17, 89, 94, 49, 51, 25, 74, 13, 18, 23, 5, 51, 73, 35, 86, 85, 64}));
assertEquals(new int[]{6, 73, 68, 55, 36, 75, 66, 5, 97, 35, 1, 8, 65, 54, 75, 76, 15, 85, 20}, Nedelja.sortedZeros(new int[]{6, 73, 68, 55, 36, 75, 66, 5, 97, 35, 1, 8, 65, 54, 75, 76, 15, 85, 20}));
assertEquals(new int[]{52, 55, 87, 95, 49, 52, 71, 81, 67, 32, 21, 3, 94, 83, 56, 25, 26}, Nedelja.sortedZeros(new int[]{52, 55, 87, 95, 49, 52, 71, 81, 67, 32, 21, 3, 94, 83, 56, 25, 26}));
assertEquals(new int[]{54, 76, 47, 47, 39, 99, 86, 12, 65, 57, 72, 44, 53, 83, 72, 14, 29, 0}, Nedelja.sortedZeros(new int[]{54, 76, 47, 47, 39, 99, 86, 12, 65, 57, 72, 44, 53, 83, 0, 72, 14, 29}));
assertEquals(new int[]{59}, Nedelja.sortedZeros(new int[]{59}));
assertEquals(new int[]{60, 31, 70, 47, 50, 61, 29, 24, 93, 89}, Nedelja.sortedZeros(new int[]{60, 31, 70, 47, 50, 61, 29, 24, 93, 89}));
assertEquals(new int[]{22, 92, 68, 31, 21, 36, 36, 87, 74, 42, 44, 5, 35, 55, 86, 79, 92, 61, 89}, Nedelja.sortedZeros(new int[]{22, 92, 68, 31, 21, 36, 36, 87, 74, 42, 44, 5, 35, 55, 86, 79, 92, 61, 89}));
assertEquals(new int[]{89, 57, 72, 38, 50, 26, 58, 45, 88, 65, 85, 33}, Nedelja.sortedZeros(new int[]{89, 57, 72, 38, 50, 26, 58, 45, 88, 65, 85, 33}));
assertEquals(new int[]{73, 36, 55, 31, 86}, Nedelja.sortedZeros(new int[]{73, 36, 55, 31, 86}));
assertEquals(new int[]{80, 10, 33, 37, 38, 6, 53, 65, 79, 62, 32, 83, 11, 55, 47, 57, 5}, Nedelja.sortedZeros(new int[]{80, 10, 33, 37, 38, 6, 53, 65, 79, 62, 32, 83, 11, 55, 47, 57, 5}));
assertEquals(new int[]{88, 56, 73, 78, 15, 96, 46, 93, 23, 16, 14, 59, 48, 89, 41, 88, 26, 40, 0}, Nedelja.sortedZeros(new int[]{88, 56, 73, 78, 15, 96, 46, 93, 23, 16, 14, 0, 59, 48, 89, 41, 88, 26, 40}));
assertEquals(new int[]{54, 5, 94, 10, 58}, Nedelja.sortedZeros(new int[]{54, 5, 94, 10, 58}));
assertEquals(new int[]{59, 68, 11, 3, 9, 75, 40}, Nedelja.sortedZeros(new int[]{59, 68, 11, 3, 9, 75, 40}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{8, 60}, Nedelja.sortedZeros(new int[]{8, 60}));
assertEquals(new int[]{21, 17, 68, 76}, Nedelja.sortedZeros(new int[]{21, 17, 68, 76}));
assertEquals(new int[]{46, 43, 56, 61, 7, 22, 80, 71}, Nedelja.sortedZeros(new int[]{46, 43, 56, 61, 7, 22, 80, 71}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{17, 85, 21, 78}, Nedelja.sortedZeros(new int[]{17, 85, 21, 78}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{87, 74, 13, 56, 29, 89}, Nedelja.sortedZeros(new int[]{87, 74, 13, 56, 29, 89}));
assertEquals(new int[]{99, 57, 18, 60}, Nedelja.sortedZeros(new int[]{99, 57, 18, 60}));
assertEquals(new int[]{99, 85, 46, 12}, Nedelja.sortedZeros(new int[]{99, 85, 46, 12}));
assertEquals(new int[]{31, 37, 76, 42, 61, 74, 48, 67, 60, 94, 43, 87, 79, 83, 0}, Nedelja.sortedZeros(new int[]{31, 37, 76, 42, 61, 74, 48, 67, 60, 94, 43, 87, 79, 83, 0}));
assertEquals(new int[]{10, 94, 9, 72, 75, 29, 81, 97}, Nedelja.sortedZeros(new int[]{10, 94, 9, 72, 75, 29, 81, 97}));
assertEquals(new int[]{52}, Nedelja.sortedZeros(new int[]{52}));
assertEquals(new int[]{18, 52, 67, 95, 44, 5, 24, 35, 18, 92, 40, 0}, Nedelja.sortedZeros(new int[]{18, 52, 67, 0, 95, 44, 5, 24, 35, 18, 92, 40}));
assertEquals(new int[]{70, 25, 21, 52, 12, 72, 97, 58, 72, 49}, Nedelja.sortedZeros(new int[]{70, 25, 21, 52, 12, 72, 97, 58, 72, 49}));
assertEquals(new int[]{2, 95, 22, 73}, Nedelja.sortedZeros(new int[]{2, 95, 22, 73}));
assertEquals(new int[]{54, 11, 76, 84, 28, 33, 33, 88, 44, 69, 6, 79, 54, 78, 68, 83, 44}, Nedelja.sortedZeros(new int[]{54, 11, 76, 84, 28, 33, 33, 88, 44, 69, 6, 79, 54, 78, 68, 83, 44}));
assertEquals(new int[]{32, 7, 50, 25, 17, 71, 22, 37, 57, 46, 21, 51, 50, 45, 22, 6, 36, 45}, Nedelja.sortedZeros(new int[]{32, 7, 50, 25, 17, 71, 22, 37, 57, 46, 21, 51, 50, 45, 22, 6, 36, 45}));
assertEquals(new int[]{42, 16, 97, 17, 24, 57, 8, 75, 2, 88, 74}, Nedelja.sortedZeros(new int[]{42, 16, 97, 17, 24, 57, 8, 75, 2, 88, 74}));
assertEquals(new int[]{22, 83, 34, 92, 22, 87, 21, 30, 0}, Nedelja.sortedZeros(new int[]{22, 83, 34, 92, 22, 87, 0, 21, 30}));
assertEquals(new int[]{20, 41, 77}, Nedelja.sortedZeros(new int[]{20, 41, 77}));
assertEquals(new int[]{87, 52, 33, 14, 92, 7, 57, 91, 88, 80, 20}, Nedelja.sortedZeros(new int[]{87, 52, 33, 14, 92, 7, 57, 91, 88, 80, 20}));
assertEquals(new int[]{5, 26, 38, 7, 72, 96}, Nedelja.sortedZeros(new int[]{5, 26, 38, 7, 72, 96}));
assertEquals(new int[]{20, 19, 9, 59, 38, 28, 54, 8, 62, 57}, Nedelja.sortedZeros(new int[]{20, 19, 9, 59, 38, 28, 54, 8, 62, 57}));
assertEquals(new int[]{63, 19, 17, 53, 2, 28, 95, 19, 8, 25, 34, 23}, Nedelja.sortedZeros(new int[]{63, 19, 17, 53, 2, 28, 95, 19, 8, 25, 34, 23}));
assertEquals(new int[]{23, 40, 7, 65, 25, 60, 44, 41, 3, 2, 15, 53}, Nedelja.sortedZeros(new int[]{23, 40, 7, 65, 25, 60, 44, 41, 3, 2, 15, 53}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{80, 62, 24, 57, 38, 83, 26, 23, 5, 56, 27, 53, 2, 5, 20, 23, 68, 42, 93}, Nedelja.sortedZeros(new int[]{80, 62, 24, 57, 38, 83, 26, 23, 5, 56, 27, 53, 2, 5, 20, 23, 68, 42, 93}));
assertEquals(new int[]{11, 89, 3, 63, 6, 2}, Nedelja.sortedZeros(new int[]{11, 89, 3, 63, 6, 2}));
assertEquals(new int[]{40, 62, 72, 31, 22, 7, 31, 63, 56, 18, 64, 87, 5, 94, 13, 97, 80, 35, 89}, Nedelja.sortedZeros(new int[]{40, 62, 72, 31, 22, 7, 31, 63, 56, 18, 64, 87, 5, 94, 13, 97, 80, 35, 89}));
assertEquals(new int[]{91, 60, 64, 43, 37, 93, 97, 52, 95}, Nedelja.sortedZeros(new int[]{91, 60, 64, 43, 37, 93, 97, 52, 95}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{93, 99, 68, 93, 57, 50, 94, 66, 46, 30}, Nedelja.sortedZeros(new int[]{93, 99, 68, 93, 57, 50, 94, 66, 46, 30}));
assertEquals(new int[]{48, 46, 31, 62, 30, 97}, Nedelja.sortedZeros(new int[]{48, 46, 31, 62, 30, 97}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{95}, Nedelja.sortedZeros(new int[]{95}));
assertEquals(new int[]{83, 78}, Nedelja.sortedZeros(new int[]{83, 78}));
assertEquals(new int[]{5, 58, 60, 34, 56, 21, 15}, Nedelja.sortedZeros(new int[]{5, 58, 60, 34, 56, 21, 15}));
assertEquals(new int[]{57, 80, 56, 87, 57, 20, 73, 9, 45, 18, 95, 81, 10, 10, 94, 97}, Nedelja.sortedZeros(new int[]{57, 80, 56, 87, 57, 20, 73, 9, 45, 18, 95, 81, 10, 10, 94, 97}));
assertEquals(new int[]{72, 53, 0}, Nedelja.sortedZeros(new int[]{0, 72, 53}));
assertEquals(new int[]{32, 70, 74, 48, 83, 84, 0}, Nedelja.sortedZeros(new int[]{32, 70, 74, 48, 83, 84, 0}));
assertEquals(new int[]{44}, Nedelja.sortedZeros(new int[]{44}));
assertEquals(new int[]{87}, Nedelja.sortedZeros(new int[]{87}));
assertEquals(new int[]{51, 33, 21, 51, 64, 2, 10, 64, 73, 23, 26, 4, 95, 22, 53, 50, 53, 38}, Nedelja.sortedZeros(new int[]{51, 33, 21, 51, 64, 2, 10, 64, 73, 23, 26, 4, 95, 22, 53, 50, 53, 38}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{74, 20, 92, 24, 44, 46, 80, 87, 26, 19, 63, 51, 24, 84}, Nedelja.sortedZeros(new int[]{74, 20, 92, 24, 44, 46, 80, 87, 26, 19, 63, 51, 24, 84}));
assertEquals(new int[]{29, 27, 38, 57, 94, 32, 1, 1, 49, 15, 58, 25, 24, 25, 71, 46, 38, 77, 35}, Nedelja.sortedZeros(new int[]{29, 27, 38, 57, 94, 32, 1, 1, 49, 15, 58, 25, 24, 25, 71, 46, 38, 77, 35}));
assertEquals(new int[]{32, 11, 92, 35, 22, 19, 83, 30, 45, 92, 97, 2, 15, 38, 38, 86, 0}, Nedelja.sortedZeros(new int[]{32, 11, 0, 92, 35, 22, 19, 83, 30, 45, 92, 97, 2, 15, 38, 38, 86}));
assertEquals(new int[]{52, 42, 71}, Nedelja.sortedZeros(new int[]{52, 42, 71}));
assertEquals(new int[]{47, 99, 8, 72}, Nedelja.sortedZeros(new int[]{47, 99, 8, 72}));
assertEquals(new int[]{74, 1, 53, 87, 93, 0, 0}, Nedelja.sortedZeros(new int[]{0, 74, 1, 53, 87, 0, 93}));
assertEquals(new int[]{63, 89, 52, 74, 68, 39, 9, 89, 83, 66, 64, 84, 26}, Nedelja.sortedZeros(new int[]{63, 89, 52, 74, 68, 39, 9, 89, 83, 66, 64, 84, 26}));
assertEquals(new int[]{68, 44, 94, 25, 67, 51, 8, 87, 68, 49}, Nedelja.sortedZeros(new int[]{68, 44, 94, 25, 67, 51, 8, 87, 68, 49}));
assertEquals(new int[]{36, 82}, Nedelja.sortedZeros(new int[]{36, 82}));
assertEquals(new int[]{63, 7, 86, 41, 32, 15, 81, 44, 92, 60, 9, 25, 90, 12, 36, 32, 90}, Nedelja.sortedZeros(new int[]{63, 7, 86, 41, 32, 15, 81, 44, 92, 60, 9, 25, 90, 12, 36, 32, 90}));
assertEquals(new int[]{74, 15, 22, 57, 13, 55, 50, 41, 64, 67, 64, 2, 41, 84, 43, 20, 27, 44, 75}, Nedelja.sortedZeros(new int[]{74, 15, 22, 57, 13, 55, 50, 41, 64, 67, 64, 2, 41, 84, 43, 20, 27, 44, 75}));
assertEquals(new int[]{44, 99, 12, 45, 67, 61, 40, 44, 91, 31, 66, 63, 32, 49, 0}, Nedelja.sortedZeros(new int[]{44, 99, 12, 45, 0, 67, 61, 40, 44, 91, 31, 66, 63, 32, 49}));
assertEquals(new int[]{53, 28, 48, 67, 98, 26, 10, 16, 10, 64, 56, 84, 82, 54, 0}, Nedelja.sortedZeros(new int[]{53, 0, 28, 48, 67, 98, 26, 10, 16, 10, 64, 56, 84, 82, 54}));
assertEquals(new int[]{80, 60, 20, 35, 91, 20, 7}, Nedelja.sortedZeros(new int[]{80, 60, 20, 35, 91, 20, 7}));
assertEquals(new int[]{93, 18, 41}, Nedelja.sortedZeros(new int[]{93, 18, 41}));
assertEquals(new int[]{98, 63, 20, 61}, Nedelja.sortedZeros(new int[]{98, 63, 20, 61}));
assertEquals(new int[]{33, 19, 23, 46, 29, 23, 19, 23, 70, 43, 74, 66}, Nedelja.sortedZeros(new int[]{33, 19, 23, 46, 29, 23, 19, 23, 70, 43, 74, 66}));
assertEquals(new int[]{94, 53, 98, 74, 25, 7, 69}, Nedelja.sortedZeros(new int[]{94, 53, 98, 74, 25, 7, 69}));
assertEquals(new int[]{88, 35, 55, 45, 85, 43, 96, 82, 93, 99, 81, 97, 62, 74}, Nedelja.sortedZeros(new int[]{88, 35, 55, 45, 85, 43, 96, 82, 93, 99, 81, 97, 62, 74}));
assertEquals(new int[]{94, 25, 91, 38, 38, 74, 85, 63, 82, 87, 42, 68}, Nedelja.sortedZeros(new int[]{94, 25, 91, 38, 38, 74, 85, 63, 82, 87, 42, 68}));
assertEquals(new int[]{53}, Nedelja.sortedZeros(new int[]{53}));
assertEquals(new int[]{35, 69, 20, 32, 62, 32, 20, 61, 83}, Nedelja.sortedZeros(new int[]{35, 69, 20, 32, 62, 32, 20, 61, 83}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{26, 13, 32, 80, 84, 26, 51, 76, 8}, Nedelja.sortedZeros(new int[]{26, 13, 32, 80, 84, 26, 51, 76, 8}));
assertEquals(new int[]{25}, Nedelja.sortedZeros(new int[]{25}));
assertEquals(new int[]{97, 6, 30, 12, 38, 35, 52, 80, 34, 76, 11}, Nedelja.sortedZeros(new int[]{97, 6, 30, 12, 38, 35, 52, 80, 34, 76, 11}));
assertEquals(new int[]{96}, Nedelja.sortedZeros(new int[]{96}));
assertEquals(new int[]{38, 20, 2, 66, 20, 25}, Nedelja.sortedZeros(new int[]{38, 20, 2, 66, 20, 25}));
assertEquals(new int[]{55, 6, 15}, Nedelja.sortedZeros(new int[]{55, 6, 15}));
assertEquals(new int[]{75, 97, 29, 6}, Nedelja.sortedZeros(new int[]{75, 97, 29, 6}));
assertEquals(new int[]{64, 33, 75, 51, 86, 91, 81, 60, 93, 82, 79, 57, 76, 96, 23}, Nedelja.sortedZeros(new int[]{64, 33, 75, 51, 86, 91, 81, 60, 93, 82, 79, 57, 76, 96, 23}));
assertEquals(new int[]{21}, Nedelja.sortedZeros(new int[]{21}));
assertEquals(new int[]{67, 30, 1, 97, 90, 47, 75, 99}, Nedelja.sortedZeros(new int[]{67, 30, 1, 97, 90, 47, 75, 99}));
assertEquals(new int[]{81, 23, 34, 61, 23, 72, 31, 96, 50, 62, 44, 0}, Nedelja.sortedZeros(new int[]{81, 0, 23, 34, 61, 23, 72, 31, 96, 50, 62, 44}));
assertEquals(new int[]{54, 20, 55, 42, 60, 64, 87, 39, 67, 17, 32, 69, 82, 45, 28, 54}, Nedelja.sortedZeros(new int[]{54, 20, 55, 42, 60, 64, 87, 39, 67, 17, 32, 69, 82, 45, 28, 54}));
assertEquals(new int[]{43, 71, 82, 57, 73, 41, 12, 42, 61, 38, 15, 25}, Nedelja.sortedZeros(new int[]{43, 71, 82, 57, 73, 41, 12, 42, 61, 38, 15, 25}));
assertEquals(new int[]{65, 18, 5, 36, 73, 30, 58, 21, 42, 65, 38, 43, 77, 28, 94, 78}, Nedelja.sortedZeros(new int[]{65, 18, 5, 36, 73, 30, 58, 21, 42, 65, 38, 43, 77, 28, 94, 78}));
assertEquals(new int[]{61, 58, 56, 59, 35, 81, 93, 89}, Nedelja.sortedZeros(new int[]{61, 58, 56, 59, 35, 81, 93, 89}));
assertEquals(new int[]{96, 28, 71, 20, 62, 46, 22, 57}, Nedelja.sortedZeros(new int[]{96, 28, 71, 20, 62, 46, 22, 57}));
assertEquals(new int[]{90, 77, 32, 55, 43, 40, 47, 46, 38, 37, 81, 23, 75, 46, 10}, Nedelja.sortedZeros(new int[]{90, 77, 32, 55, 43, 40, 47, 46, 38, 37, 81, 23, 75, 46, 10}));
assertEquals(new int[]{85, 6, 99, 11, 36, 87, 45, 86, 91, 69, 46, 22, 53}, Nedelja.sortedZeros(new int[]{85, 6, 99, 11, 36, 87, 45, 86, 91, 69, 46, 22, 53}));
assertEquals(new int[]{23, 3, 7}, Nedelja.sortedZeros(new int[]{23, 3, 7}));
assertEquals(new int[]{55, 51, 32, 85, 8, 54, 91, 77, 30, 80, 39, 69, 44}, Nedelja.sortedZeros(new int[]{55, 51, 32, 85, 8, 54, 91, 77, 30, 80, 39, 69, 44}));
assertEquals(new int[]{80, 89, 39, 44, 70, 52, 67, 44, 31, 23}, Nedelja.sortedZeros(new int[]{80, 89, 39, 44, 70, 52, 67, 44, 31, 23}));
assertEquals(new int[]{72, 65, 10, 28, 93, 61, 32, 30, 4, 93, 7, 9, 2}, Nedelja.sortedZeros(new int[]{72, 65, 10, 28, 93, 61, 32, 30, 4, 93, 7, 9, 2}));
assertEquals(new int[]{97, 30, 14, 96, 73, 88, 17, 89, 41}, Nedelja.sortedZeros(new int[]{97, 30, 14, 96, 73, 88, 17, 89, 41}));
assertEquals(new int[]{94, 68, 96, 82, 78, 91, 96, 33, 96, 19, 36}, Nedelja.sortedZeros(new int[]{94, 68, 96, 82, 78, 91, 96, 33, 96, 19, 36}));
assertEquals(new int[]{24, 77, 46, 44, 7, 46, 52, 40, 55, 30, 53, 35}, Nedelja.sortedZeros(new int[]{24, 77, 46, 44, 7, 46, 52, 40, 55, 30, 53, 35}));
assertEquals(new int[]{98, 19, 54, 14, 72, 35}, Nedelja.sortedZeros(new int[]{98, 19, 54, 14, 72, 35}));
assertEquals(new int[]{80, 26, 37, 1, 31, 95, 55, 23, 36}, Nedelja.sortedZeros(new int[]{80, 26, 37, 1, 31, 95, 55, 23, 36}));
assertEquals(new int[]{93, 11, 58, 60, 37, 18, 83, 53, 18}, Nedelja.sortedZeros(new int[]{93, 11, 58, 60, 37, 18, 83, 53, 18}));
assertEquals(new int[]{81, 52, 15, 78, 49, 70, 39, 62}, Nedelja.sortedZeros(new int[]{81, 52, 15, 78, 49, 70, 39, 62}));
assertEquals(new int[]{43, 90, 76, 35, 15, 34, 11, 69, 98, 39, 43, 62, 28, 27, 96}, Nedelja.sortedZeros(new int[]{43, 90, 76, 35, 15, 34, 11, 69, 98, 39, 43, 62, 28, 27, 96}));
assertEquals(new int[]{51, 20, 94, 5, 82, 92, 62, 48, 2, 40, 63, 85, 68, 46, 77, 36, 3, 0}, Nedelja.sortedZeros(new int[]{51, 20, 94, 5, 82, 92, 62, 48, 2, 40, 63, 85, 68, 46, 0, 77, 36, 3}));
assertEquals(new int[]{35, 43, 49, 27, 95, 61, 49, 31, 56, 70, 50, 38, 11, 41, 55, 45, 83, 0}, Nedelja.sortedZeros(new int[]{35, 43, 49, 27, 95, 61, 49, 31, 56, 70, 50, 38, 11, 0, 41, 55, 45, 83}));
assertEquals(new int[]{8, 50, 11, 75, 98, 48}, Nedelja.sortedZeros(new int[]{8, 50, 11, 75, 98, 48}));
assertEquals(new int[]{60, 94, 1, 98, 12, 50, 65, 55, 34, 82, 84, 43, 59, 97}, Nedelja.sortedZeros(new int[]{60, 94, 1, 98, 12, 50, 65, 55, 34, 82, 84, 43, 59, 97}));
assertEquals(new int[]{80, 47, 6, 79, 47, 69, 0}, Nedelja.sortedZeros(new int[]{0, 80, 47, 6, 79, 47, 69}));
assertEquals(new int[]{97, 59, 57, 61, 74, 81, 35, 68, 90}, Nedelja.sortedZeros(new int[]{97, 59, 57, 61, 74, 81, 35, 68, 90}));
assertEquals(new int[]{17, 62, 5, 73, 71, 2, 47, 38, 28, 47, 30, 58, 84}, Nedelja.sortedZeros(new int[]{17, 62, 5, 73, 71, 2, 47, 38, 28, 47, 30, 58, 84}));
assertEquals(new int[]{99, 12, 39, 75, 3, 81, 55, 20, 90, 87, 77, 3, 79, 91, 52, 56, 11}, Nedelja.sortedZeros(new int[]{99, 12, 39, 75, 3, 81, 55, 20, 90, 87, 77, 3, 79, 91, 52, 56, 11}));
assertEquals(new int[]{11, 29, 1, 70, 22, 20, 17, 48, 80, 20, 79, 12, 53, 38, 48, 7, 72, 68}, Nedelja.sortedZeros(new int[]{11, 29, 1, 70, 22, 20, 17, 48, 80, 20, 79, 12, 53, 38, 48, 7, 72, 68}));
assertEquals(new int[]{4, 77, 66, 8, 66, 65, 51, 70, 78, 48, 77, 56, 9, 45, 82, 70, 50, 18}, Nedelja.sortedZeros(new int[]{4, 77, 66, 8, 66, 65, 51, 70, 78, 48, 77, 56, 9, 45, 82, 70, 50, 18}));
assertEquals(new int[]{30, 48, 65, 75, 90, 56}, Nedelja.sortedZeros(new int[]{30, 48, 65, 75, 90, 56}));
assertEquals(new int[]{41, 7, 12, 16, 65, 34, 37, 63, 19, 60, 59, 25, 58, 31, 63, 69, 53, 72, 76}, Nedelja.sortedZeros(new int[]{41, 7, 12, 16, 65, 34, 37, 63, 19, 60, 59, 25, 58, 31, 63, 69, 53, 72, 76}));
assertEquals(new int[]{94, 22, 79, 60, 38, 16, 3, 10, 56, 9, 3, 76, 95, 13, 1, 40, 62}, Nedelja.sortedZeros(new int[]{94, 22, 79, 60, 38, 16, 3, 10, 56, 9, 3, 76, 95, 13, 1, 40, 62}));
assertEquals(new int[]{35, 46, 26}, Nedelja.sortedZeros(new int[]{35, 46, 26}));
assertEquals(new int[]{37, 60, 3, 96}, Nedelja.sortedZeros(new int[]{37, 60, 3, 96}));
assertEquals(new int[]{57, 95, 42, 76, 7, 39, 10, 24}, Nedelja.sortedZeros(new int[]{57, 95, 42, 76, 7, 39, 10, 24}));
assertEquals(new int[]{28, 85, 73, 51, 47, 44, 90, 84, 85, 6, 41, 27, 91, 24, 80, 34}, Nedelja.sortedZeros(new int[]{28, 85, 73, 51, 47, 44, 90, 84, 85, 6, 41, 27, 91, 24, 80, 34}));
assertEquals(new int[]{81, 9, 98, 68, 85, 30, 25}, Nedelja.sortedZeros(new int[]{81, 9, 98, 68, 85, 30, 25}));
assertEquals(new int[]{29, 7, 11, 21, 78, 63, 38, 72, 77, 50}, Nedelja.sortedZeros(new int[]{29, 7, 11, 21, 78, 63, 38, 72, 77, 50}));
assertEquals(new int[]{52, 18, 37, 27, 45, 84, 87, 13, 68, 19, 4, 3, 29}, Nedelja.sortedZeros(new int[]{52, 18, 37, 27, 45, 84, 87, 13, 68, 19, 4, 3, 29}));
assertEquals(new int[]{62, 33, 36, 66, 49, 53, 90, 32, 85, 86, 32, 18, 16, 5}, Nedelja.sortedZeros(new int[]{62, 33, 36, 66, 49, 53, 90, 32, 85, 86, 32, 18, 16, 5}));
assertEquals(new int[]{28, 13, 37, 14, 38, 38, 41, 51, 74, 97, 57, 57, 2}, Nedelja.sortedZeros(new int[]{28, 13, 37, 14, 38, 38, 41, 51, 74, 97, 57, 57, 2}));
assertEquals(new int[]{15, 55, 74, 41, 99, 18}, Nedelja.sortedZeros(new int[]{15, 55, 74, 41, 99, 18}));
assertEquals(new int[]{21, 17, 81, 71, 81, 33, 0}, Nedelja.sortedZeros(new int[]{21, 17, 0, 81, 71, 81, 33}));
assertEquals(new int[]{5, 15, 85, 67, 20, 24, 51, 95, 75, 29, 38, 35, 76}, Nedelja.sortedZeros(new int[]{5, 15, 85, 67, 20, 24, 51, 95, 75, 29, 38, 35, 76}));
assertEquals(new int[]{65, 27, 50, 57}, Nedelja.sortedZeros(new int[]{65, 27, 50, 57}));
assertEquals(new int[]{22, 46}, Nedelja.sortedZeros(new int[]{22, 46}));
assertEquals(new int[]{3, 39, 96, 36, 20, 47, 31, 8, 59, 28, 34, 5, 75}, Nedelja.sortedZeros(new int[]{3, 39, 96, 36, 20, 47, 31, 8, 59, 28, 34, 5, 75}));
assertEquals(new int[]{19, 84, 15, 87, 57, 19}, Nedelja.sortedZeros(new int[]{19, 84, 15, 87, 57, 19}));
assertEquals(new int[]{85, 43, 2, 65, 22, 9, 16}, Nedelja.sortedZeros(new int[]{85, 43, 2, 65, 22, 9, 16}));
assertEquals(new int[]{23, 54, 59, 31, 86, 8, 46, 90, 80}, Nedelja.sortedZeros(new int[]{23, 54, 59, 31, 86, 8, 46, 90, 80}));
assertEquals(new int[]{70}, Nedelja.sortedZeros(new int[]{70}));
assertEquals(new int[]{97, 2, 8, 55, 17, 79, 86, 65, 84, 0}, Nedelja.sortedZeros(new int[]{97, 2, 8, 55, 17, 79, 0, 86, 65, 84}));
assertEquals(new int[]{40, 47, 21, 49, 34, 52, 37, 68, 60, 26, 67}, Nedelja.sortedZeros(new int[]{40, 47, 21, 49, 34, 52, 37, 68, 60, 26, 67}));
assertEquals(new int[]{95}, Nedelja.sortedZeros(new int[]{95}));
assertEquals(new int[]{48, 33, 75, 36, 13, 18, 0}, Nedelja.sortedZeros(new int[]{48, 0, 33, 75, 36, 13, 18}));
assertEquals(new int[]{28, 48, 57, 45, 55, 41, 78, 7, 38}, Nedelja.sortedZeros(new int[]{28, 48, 57, 45, 55, 41, 78, 7, 38}));
assertEquals(new int[]{1}, Nedelja.sortedZeros(new int[]{1}));
assertEquals(new int[]{56, 46, 24, 89, 88, 96}, Nedelja.sortedZeros(new int[]{56, 46, 24, 89, 88, 96}));
assertEquals(new int[]{97, 91, 18, 69, 61, 65, 92, 55, 57, 61, 5, 6, 4, 17}, Nedelja.sortedZeros(new int[]{97, 91, 18, 69, 61, 65, 92, 55, 57, 61, 5, 6, 4, 17}));
assertEquals(new int[]{82, 58, 74, 44, 81, 17, 95, 2, 38, 38, 62, 96, 57, 25, 11}, Nedelja.sortedZeros(new int[]{82, 58, 74, 44, 81, 17, 95, 2, 38, 38, 62, 96, 57, 25, 11}));
assertEquals(new int[]{94, 33, 26, 63, 49, 73}, Nedelja.sortedZeros(new int[]{94, 33, 26, 63, 49, 73}));
assertEquals(new int[]{6, 76, 97, 3, 37, 15, 77, 38, 29, 85, 34, 45, 26, 22, 43, 62, 1, 83}, Nedelja.sortedZeros(new int[]{6, 76, 97, 3, 37, 15, 77, 38, 29, 85, 34, 45, 26, 22, 43, 62, 1, 83}));
assertEquals(new int[]{83, 36, 43, 91, 47, 34, 2, 86, 98, 7, 39, 49, 11}, Nedelja.sortedZeros(new int[]{83, 36, 43, 91, 47, 34, 2, 86, 98, 7, 39, 49, 11}));
assertEquals(new int[]{78, 50, 30, 51, 26, 90, 34, 98, 87, 41, 95, 14, 53, 30, 48, 69, 42, 90}, Nedelja.sortedZeros(new int[]{78, 50, 30, 51, 26, 90, 34, 98, 87, 41, 95, 14, 53, 30, 48, 69, 42, 90}));
assertEquals(new int[]{74, 25, 21, 48, 61, 89, 27, 1, 55, 43, 95, 3, 62, 90, 18, 67, 91}, Nedelja.sortedZeros(new int[]{74, 25, 21, 48, 61, 89, 27, 1, 55, 43, 95, 3, 62, 90, 18, 67, 91}));
assertEquals(new int[]{53, 54, 49, 4, 98, 30, 5, 64, 92, 47, 96}, Nedelja.sortedZeros(new int[]{53, 54, 49, 4, 98, 30, 5, 64, 92, 47, 96}));
assertEquals(new int[]{13, 91, 62, 45, 23, 25, 11, 91, 23, 75, 19, 94, 29, 73, 19, 87, 36, 24}, Nedelja.sortedZeros(new int[]{13, 91, 62, 45, 23, 25, 11, 91, 23, 75, 19, 94, 29, 73, 19, 87, 36, 24}));
assertEquals(new int[]{54, 50, 10, 43, 14, 73, 22, 51, 19, 5, 55, 34, 85, 81, 87, 76}, Nedelja.sortedZeros(new int[]{54, 50, 10, 43, 14, 73, 22, 51, 19, 5, 55, 34, 85, 81, 87, 76}));
assertEquals(new int[]{88, 15, 50, 70, 48, 17, 5, 0}, Nedelja.sortedZeros(new int[]{88, 15, 50, 70, 48, 0, 17, 5}));
assertEquals(new int[]{70, 2, 21, 91, 51, 38, 76, 59, 63, 96, 36, 3, 18, 65, 20, 36, 8, 53}, Nedelja.sortedZeros(new int[]{70, 2, 21, 91, 51, 38, 76, 59, 63, 96, 36, 3, 18, 65, 20, 36, 8, 53}));
assertEquals(new int[]{3}, Nedelja.sortedZeros(new int[]{3}));
assertEquals(new int[]{38, 61, 18, 76, 88}, Nedelja.sortedZeros(new int[]{38, 61, 18, 76, 88}));
assertEquals(new int[]{14}, Nedelja.sortedZeros(new int[]{14}));
assertEquals(new int[]{92, 38, 91, 34, 62}, Nedelja.sortedZeros(new int[]{92, 38, 91, 34, 62}));
assertEquals(new int[]{54, 17, 73, 46, 94, 27, 57, 40, 39, 78, 59, 93, 88}, Nedelja.sortedZeros(new int[]{54, 17, 73, 46, 94, 27, 57, 40, 39, 78, 59, 93, 88}));
assertEquals(new int[]{35, 31, 7, 96, 54, 16, 77, 13, 68}, Nedelja.sortedZeros(new int[]{35, 31, 7, 96, 54, 16, 77, 13, 68}));
assertEquals(new int[]{26, 15, 61}, Nedelja.sortedZeros(new int[]{26, 15, 61}));
assertEquals(new int[]{42, 77}, Nedelja.sortedZeros(new int[]{42, 77}));
assertEquals(new int[]{18, 48, 17, 70, 1, 67, 5, 18, 84, 12, 38, 97}, Nedelja.sortedZeros(new int[]{18, 48, 17, 70, 1, 67, 5, 18, 84, 12, 38, 97}));
assertEquals(new int[]{71}, Nedelja.sortedZeros(new int[]{71}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{4, 7, 55, 76, 40, 74, 17, 84, 13, 67, 18, 85, 27, 71, 85, 1}, Nedelja.sortedZeros(new int[]{4, 7, 55, 76, 40, 74, 17, 84, 13, 67, 18, 85, 27, 71, 85, 1}));
assertEquals(new int[]{36, 53, 71, 83, 46, 40, 70, 32, 89, 85, 97, 0}, Nedelja.sortedZeros(new int[]{36, 0, 53, 71, 83, 46, 40, 70, 32, 89, 85, 97}));
assertEquals(new int[]{}, Nedelja.sortedZeros(new int[]{}));
assertEquals(new int[]{48, 75, 15, 59}, Nedelja.sortedZeros(new int[]{48, 75, 15, 59}));
assertEquals(new int[]{85, 65, 39, 28, 64, 4, 73, 64, 3, 20, 42, 62, 38, 29, 22, 87, 90, 57, 27}, Nedelja.sortedZeros(new int[]{85, 65, 39, 28, 64, 4, 73, 64, 3, 20, 42, 62, 38, 29, 22, 87, 90, 57, 27}));
assertEquals(new int[]{32}, Nedelja.sortedZeros(new int[]{32}));
assertEquals(new int[]{95}, Nedelja.sortedZeros(new int[]{95}));
assertEquals(new int[]{45, 29, 93, 14, 28, 57, 35, 65, 46, 83, 84, 52, 95, 19}, Nedelja.sortedZeros(new int[]{45, 29, 93, 14, 28, 57, 35, 65, 46, 83, 84, 52, 95, 19}));
assertEquals(new int[]{59, 71, 78, 83, 87}, Nedelja.sortedZeros(new int[]{59, 71, 78, 83, 87}));
assertEquals(new int[]{33, 31, 8, 20, 52, 61, 18, 45, 84, 27, 93, 55, 74}, Nedelja.sortedZeros(new int[]{33, 31, 8, 20, 52, 61, 18, 45, 84, 27, 93, 55, 74}));
assertEquals(new int[]{62, 48, 30}, Nedelja.sortedZeros(new int[]{62, 48, 30}));
assertEquals(new int[]{17, 97, 90, 34, 69, 11, 69, 92, 39, 64, 45, 71, 78, 49, 6}, Nedelja.sortedZeros(new int[]{17, 97, 90, 34, 69, 11, 69, 92, 39, 64, 45, 71, 78, 49, 6}));
assertEquals(new int[]{76, 17, 50, 33, 75, 54, 23, 22, 20, 68, 12, 91, 93}, Nedelja.sortedZeros(new int[]{76, 17, 50, 33, 75, 54, 23, 22, 20, 68, 12, 91, 93}));
assertEquals(new int[]{76, 52, 51}, Nedelja.sortedZeros(new int[]{76, 52, 51}));
assertEquals(new int[]{58, 88, 61, 41, 66, 3, 50, 42, 18, 99, 19, 47, 48}, Nedelja.sortedZeros(new int[]{58, 88, 61, 41, 66, 3, 50, 42, 18, 99, 19, 47, 48}));
assertEquals(new int[]{49, 3, 39, 52, 29, 43, 89, 72, 49, 4, 63, 34, 61, 20, 82, 58, 13, 27}, Nedelja.sortedZeros(new int[]{49, 3, 39, 52, 29, 43, 89, 72, 49, 4, 63, 34, 61, 20, 82, 58, 13, 27}));
assertEquals(new int[]{38, 32, 16, 83, 31, 16, 48, 97, 15, 26, 33, 16, 53, 88}, Nedelja.sortedZeros(new int[]{38, 32, 16, 83, 31, 16, 48, 97, 15, 26, 33, 16, 53, 88}));
assertEquals(new int[]{34, 40, 27, 11, 72, 33, 7, 18, 18, 15, 38, 97, 8, 80, 13, 14}, Nedelja.sortedZeros(new int[]{34, 40, 27, 11, 72, 33, 7, 18, 18, 15, 38, 97, 8, 80, 13, 14}));
assertEquals(new int[]{62, 70, 58, 88, 4, 53, 74, 27, 75, 22, 28, 58}, Nedelja.sortedZeros(new int[]{62, 70, 58, 88, 4, 53, 74, 27, 75, 22, 28, 58}));
assertEquals(new int[]{86, 57, 15, 36, 96, 85, 35, 60, 89}, Nedelja.sortedZeros(new int[]{86, 57, 15, 36, 96, 85, 35, 60, 89}));
assertEquals(new int[]{88, 20, 98, 99, 36, 83, 62, 72, 50, 44, 40, 8, 3, 48, 22, 70, 50, 19}, Nedelja.sortedZeros(new int[]{88, 20, 98, 99, 36, 83, 62, 72, 50, 44, 40, 8, 3, 48, 22, 70, 50, 19}));
assertEquals(new int[]{89, 84, 34, 17, 7, 93, 30}, Nedelja.sortedZeros(new int[]{89, 84, 34, 17, 7, 93, 30}));
assertEquals(new int[]{56, 76, 73, 13, 51, 71, 44, 30, 88}, Nedelja.sortedZeros(new int[]{56, 76, 73, 13, 51, 71, 44, 30, 88}));
assertEquals(new int[]{35, 42, 25, 35, 20, 8, 70, 80, 68}, Nedelja.sortedZeros(new int[]{35, 42, 25, 35, 20, 8, 70, 80, 68}));
assertEquals(new int[]{65, 97, 75, 28, 7, 46, 74, 14, 48, 8, 22, 5, 34, 31, 38, 6, 89, 56, 2}, Nedelja.sortedZeros(new int[]{65, 97, 75, 28, 7, 46, 74, 14, 48, 8, 22, 5, 34, 31, 38, 6, 89, 56, 2}));
assertEquals(new int[]{42, 16, 44, 91, 63, 98, 48, 75, 83, 17, 45, 57, 15, 96, 79}, Nedelja.sortedZeros(new int[]{42, 16, 44, 91, 63, 98, 48, 75, 83, 17, 45, 57, 15, 96, 79}));
assertEquals(new int[]{37, 58, 68, 76, 51, 36, 4}, Nedelja.sortedZeros(new int[]{37, 58, 68, 76, 51, 36, 4}));
assertEquals(new int[]{38, 88, 79, 13, 43, 43, 69, 91, 5, 53, 27, 20, 70}, Nedelja.sortedZeros(new int[]{38, 88, 79, 13, 43, 43, 69, 91, 5, 53, 27, 20, 70}));
assertEquals(new int[]{5, 53, 22, 79}, Nedelja.sortedZeros(new int[]{5, 53, 22, 79}));
assertEquals(new int[]{18, 82, 5, 37, 49, 52, 28, 48, 88, 70, 37}, Nedelja.sortedZeros(new int[]{18, 82, 5, 37, 49, 52, 28, 48, 88, 70, 37}));
assertEquals(new int[]{88, 1, 34, 15, 26, 76, 90, 45, 28, 49, 39, 4, 55}, Nedelja.sortedZeros(new int[]{88, 1, 34, 15, 26, 76, 90, 45, 28, 49, 39, 4, 55}));
assertEquals(new int[]{64, 5, 55, 12, 67, 30, 71, 33, 76, 92, 17, 19}, Nedelja.sortedZeros(new int[]{64, 5, 55, 12, 67, 30, 71, 33, 76, 92, 17, 19}));
assertEquals(new int[]{74, 79, 21, 32, 0}, Nedelja.sortedZeros(new int[]{74, 79, 0, 21, 32}));
assertEquals(new int[]{7, 26, 24, 50, 89, 89, 45, 55, 64, 5, 12, 97, 53}, Nedelja.sortedZeros(new int[]{7, 26, 24, 50, 89, 89, 45, 55, 64, 5, 12, 97, 53}));
assertEquals(new int[]{47}, Nedelja.sortedZeros(new int[]{47}));
assertEquals(new int[]{85, 91}, Nedelja.sortedZeros(new int[]{85, 91}));
assertEquals(new int[]{52, 64}, Nedelja.sortedZeros(new int[]{52, 64}));
assertEquals(new int[]{30, 61, 6, 80, 72, 97, 56}, Nedelja.sortedZeros(new int[]{30, 61, 6, 80, 72, 97, 56}));
assertEquals(new int[]{18, 95, 48, 80, 21, 82, 60}, Nedelja.sortedZeros(new int[]{18, 95, 48, 80, 21, 82, 60}));
assertEquals(new int[]{9, 88, 75, 38, 50, 17, 60, 93, 81, 13, 42, 82}, Nedelja.sortedZeros(new int[]{9, 88, 75, 38, 50, 17, 60, 93, 81, 13, 42, 82}));
assertEquals(new int[]{45, 50, 10, 9, 31, 6, 66, 81, 15, 80, 89, 11, 12}, Nedelja.sortedZeros(new int[]{45, 50, 10, 9, 31, 6, 66, 81, 15, 80, 89, 11, 12}));
assertEquals(new int[]{99, 77}, Nedelja.sortedZeros(new int[]{99, 77}));
assertEquals(new int[]{8, 75, 47, 54}, Nedelja.sortedZeros(new int[]{8, 75, 47, 54}));
assertEquals(new int[]{3, 45, 68, 12, 30, 11, 87, 57, 22, 1, 96, 24, 29, 5, 77, 91}, Nedelja.sortedZeros(new int[]{3, 45, 68, 12, 30, 11, 87, 57, 22, 1, 96, 24, 29, 5, 77, 91}));
assertEquals(new int[]{38, 51, 73, 83, 82, 76, 90, 9, 51, 98, 75, 6, 98}, Nedelja.sortedZeros(new int[]{38, 51, 73, 83, 82, 76, 90, 9, 51, 98, 75, 6, 98}));
assertEquals(new int[]{26, 95, 46, 27, 97, 58, 8, 78, 97, 2, 19, 66, 70, 20, 93}, Nedelja.sortedZeros(new int[]{26, 95, 46, 27, 97, 58, 8, 78, 97, 2, 19, 66, 70, 20, 93}));
assertEquals(new int[]{95, 39, 82, 29, 53, 87, 15, 75, 9, 36}, Nedelja.sortedZeros(new int[]{95, 39, 82, 29, 53, 87, 15, 75, 9, 36}));
assertEquals(new int[]{43, 47, 99, 22, 92, 81, 13, 37, 56, 29}, Nedelja.sortedZeros(new int[]{43, 47, 99, 22, 92, 81, 13, 37, 56, 29}));
assertEquals(new int[]{57, 75, 67, 3}, Nedelja.sortedZeros(new int[]{57, 75, 67, 3}));
assertEquals(new int[]{98, 55, 73, 46, 28, 9, 78, 82, 50, 31, 27, 66, 57, 97, 95, 27}, Nedelja.sortedZeros(new int[]{98, 55, 73, 46, 28, 9, 78, 82, 50, 31, 27, 66, 57, 97, 95, 27}));
assertEquals(new int[]{82, 69, 13, 77, 66, 64, 85, 96, 46, 84, 31, 49}, Nedelja.sortedZeros(new int[]{82, 69, 13, 77, 66, 64, 85, 96, 46, 84, 31, 49}));
assertEquals(new int[]{5, 24, 11, 73, 61, 65, 59, 18, 53, 91, 99, 24, 1, 47, 87, 62, 13}, Nedelja.sortedZeros(new int[]{5, 24, 11, 73, 61, 65, 59, 18, 53, 91, 99, 24, 1, 47, 87, 62, 13}));
assertEquals(new int[]{46, 83, 27, 40, 23, 91, 86, 3, 82, 26, 38, 84, 25}, Nedelja.sortedZeros(new int[]{46, 83, 27, 40, 23, 91, 86, 3, 82, 26, 38, 84, 25}));
